{
    "AWS::ACMPCA::Certificate": {
        "create": [
            "acm-pca:IssueCertificate",
            "acm-pca:GetCertificate"
        ],
        "read": [
            "acm-pca:GetCertificate"
        ],
        "update": [],
        "delete": [
            "acm-pca:GetCertificate"
        ]
    },
    "AWS::ACMPCA::CertificateAuthority": {
        "create": [
            "acm-pca:CreateCertificateAuthority",
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:GetCertificateAuthorityCsr"
        ],
        "read": [
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:GetCertificateAuthorityCsr",
            "acm-pca:ListTags"
        ],
        "update": [
            "acm-pca:ListTags",
            "acm-pca:TagCertificateAuthority",
            "acm-pca:UntagCertificateAuthority",
            "acm-pca:UpdateCertificateAuthority"
        ],
        "delete": [
            "acm-pca:DeleteCertificateAuthority"
        ]
    },
    "AWS::ACMPCA::CertificateAuthorityActivation": {
        "create": [
            "acm-pca:ImportCertificateAuthorityCertificate",
            "acm-pca:UpdateCertificateAuthority"
        ],
        "read": [
            "acm-pca:GetCertificateAuthorityCertificate",
            "acm-pca:DescribeCertificateAuthority"
        ],
        "update": [
            "acm-pca:ImportCertificateAuthorityCertificate",
            "acm-pca:UpdateCertificateAuthority"
        ],
        "delete": [
            "acm-pca:UpdateCertificateAuthority"
        ]
    },
    "AWS::APS::RuleGroupsNamespace": {
        "create": [
            "aps:CreateRuleGroupsNamespace",
            "aps:TagResource"
        ],
        "read": [
            "aps:DescribeRuleGroupsNamespace",
            "aps:ListTagsForResource"
        ],
        "update": [
            "aps:PutRuleGroupsNamespace",
            "aps:TagResource",
            "aps:UntagResource",
            "aps:ListTagsForResource"
        ],
        "delete": [
            "aps:DeleteRuleGroupsNamespace"
        ]
    },
    "AWS::APS::Workspace": {
        "create": [
            "aps:CreateWorkspace",
            "aps:TagResource",
            "aps:CreateAlertManagerDefinition"
        ],
        "read": [
            "aps:DescribeWorkspace",
            "aps:ListTagsForResource",
            "aps:DescribeAlertManagerDefinition"
        ],
        "update": [
            "aps:UpdateWorkspaceAlias",
            "aps:TagResource",
            "aps:UntagResource",
            "aps:ListTagsForResource",
            "aps:PutAlertManagerDefinition"
        ],
        "delete": [
            "aps:DeleteWorkspace",
            "aps:DeleteAlertManagerDefinition"
        ]
    },
    "AWS::AccessAnalyzer::Analyzer": {
        "create": [
            "access-analyzer:CreateAnalyzer",
            "access-analyzer:TagResource",
            "iam:CreateServiceLinkedRole",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListDelegatedAdministrators"
        ],
        "read": [
            "access-analyzer:ListAnalyzers",
            "access-analyzer:GetAnalyzer",
            "access-analyzer:ListArchiveRules"
        ],
        "update": [
            "access-analyzer:CreateArchiveRule",
            "access-analyzer:DeleteArchiveRule",
            "access-analyzer:ListAnalyzers",
            "access-analyzer:TagResource",
            "access-analyzer:UntagResource",
            "access-analyzer:UpdateArchiveRule"
        ],
        "delete": [
            "access-analyzer:DeleteAnalyzer"
        ]
    },
    "AWS::Amplify::App": {
        "create": [
            "amplify:CreateApp",
            "amplify:TagResource",
            "codecommit:GetRepository",
            "codecommit:PutRepositoryTriggers",
            "codecommit:GetRepositoryTriggers",
            "sns:CreateTopic",
            "sns:Subscribe",
            "iam:PassRole"
        ],
        "read": [
            "amplify:GetApp",
            "amplify:ListTagsForResource",
            "codecommit:GetRepository",
            "codecommit:GetRepositoryTriggers",
            "iam:PassRole"
        ],
        "update": [
            "amplify:UpdateApp",
            "amplify:ListTagsForResource",
            "amplify:TagResource",
            "amplify:UntagResource",
            "codecommit:GetRepository",
            "codecommit:PutRepositoryTriggers",
            "codecommit:GetRepositoryTriggers",
            "sns:CreateTopic",
            "sns:Subscribe",
            "sns:Unsubscribe",
            "iam:PassRole"
        ],
        "delete": [
            "amplify:DeleteApp",
            "codecommit:GetRepository",
            "codecommit:GetRepositoryTriggers",
            "sns:Unsubscribe",
            "iam:PassRole"
        ]
    },
    "AWS::Amplify::Branch": {
        "create": [
            "amplify:CreateBranch",
            "amplify:TagResource",
            "codecommit:GetRepository",
            "codecommit:PutRepositoryTriggers",
            "codecommit:GetRepositoryTriggers",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "sns:CreateTopic",
            "sns:Subscribe",
            "iam:PassRole"
        ],
        "read": [
            "amplify:GetBranch",
            "amplify:ListTagsForResource",
            "codecommit:GetRepository",
            "codecommit:GetRepositoryTriggers",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "iam:PassRole"
        ],
        "update": [
            "amplify:UpdateBranch",
            "amplify:ListTagsForResource",
            "amplify:TagResource",
            "amplify:UntagResource",
            "codecommit:GetRepository",
            "codecommit:PutRepositoryTriggers",
            "codecommit:GetRepositoryTriggers",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "sns:CreateTopic",
            "sns:Subscribe",
            "sns:Unsubscribe",
            "iam:PassRole"
        ],
        "delete": [
            "amplify:DeleteBranch",
            "codecommit:GetRepository",
            "codecommit:GetRepositoryTriggers",
            "sns:Unsubscribe",
            "iam:PassRole"
        ]
    },
    "AWS::Amplify::Domain": {
        "create": [
            "amplify:CreateDomainAssociation",
            "route53:ListHostedZones",
            "route53:ChangeResourceRecordSets",
            "iam:PassRole",
            "amplify:TagResource"
        ],
        "read": [
            "amplify:GetDomainAssociation",
            "route53:ListHostedZones",
            "iam:PassRole",
            "amplify:ListTagsForResource"
        ],
        "update": [
            "amplify:UpdateDomainAssociation",
            "route53:ListHostedZones",
            "route53:ChangeResourceRecordSets",
            "iam:PassRole",
            "amplify:ListTagsForResource",
            "amplify:TagResource",
            "amplify:UntagResource"
        ],
        "delete": [
            "amplify:DeleteDomainAssociation",
            "iam:PassRole",
            "amplify:DeleteDomainAssociation"
        ]
    },
    "AWS::ApiGateway::Account": {
        "create": [
            "apigateway:PATCH",
            "iam:GetRole",
            "iam:PassRole"
        ],
        "read": [
            "apigateway:GET"
        ],
        "update": [
            "apigateway:PATCH",
            "iam:GetRole",
            "iam:PassRole"
        ],
        "delete": []
    },
    "AWS::ApiGateway::ApiKey": {
        "create": [
            "apigateway:POST",
            "apigateway:GET"
        ],
        "read": [
            "apigateway:GET"
        ],
        "update": [
            "apigateway:GET",
            "apigateway:PATCH",
            "apigateway:PUT",
            "apigateway:DELETE"
        ],
        "delete": [
            "apigateway:DELETE"
        ]
    },
    "AWS::ApiGateway::ClientCertificate": {
        "create": [
            "apigateway:POST",
            "apigateway:GET"
        ],
        "read": [
            "apigateway:GET"
        ],
        "update": [
            "apigateway:GET",
            "apigateway:PATCH",
            "apigateway:PUT"
        ],
        "delete": [
            "apigateway:DELETE"
        ]
    },
    "AWS::ApiGateway::DocumentationVersion": {
        "create": [
            "apigateway:GET",
            "apigateway:POST"
        ],
        "read": [
            "apigateway:GET"
        ],
        "update": [
            "apigateway:GET",
            "apigateway:PATCH"
        ],
        "delete": [
            "apigateway:DELETE"
        ]
    },
    "AWS::ApiGateway::DomainName": {
        "create": [
            "apigateway:*"
        ],
        "read": [
            "apigateway:*"
        ],
        "update": [
            "apigateway:*"
        ],
        "delete": [
            "apigateway:*"
        ]
    },
    "AWS::ApiGateway::Model": {
        "create": [
            "apigateway:POST",
            "apigateway:GET"
        ],
        "read": [
            "apigateway:GET"
        ],
        "update": [
            "apigateway:PATCH",
            "apigateway:GET"
        ],
        "delete": [
            "apigateway:GET",
            "apigateway:DELETE"
        ]
    },
    "AWS::ApiGateway::RequestValidator": {
        "create": [
            "apigateway:POST",
            "apigateway:GET"
        ],
        "read": [
            "apigateway:GET"
        ],
        "update": [
            "apigateway:PATCH"
        ],
        "delete": [
            "apigateway:DELETE"
        ]
    },
    "AWS::ApiGateway::UsagePlan": {
        "create": [
            "apigateway:POST",
            "apigateway:GET"
        ],
        "read": [
            "apigateway:GET"
        ],
        "update": [
            "apigateway:GET",
            "apigateway:DELETE",
            "apigateway:PATCH",
            "apigateway:PUT"
        ],
        "delete": [
            "apigateway:DELETE"
        ]
    },
    "AWS::AppFlow::ConnectorProfile": {
        "create": [
            "appflow:CreateConnectorProfile",
            "kms:ListKeys",
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:CreateGrant",
            "kms:ListGrants",
            "iam:PassRole",
            "secretsmanager:CreateSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:PutResourcePolicy"
        ],
        "read": [
            "appflow:DescribeConnectorProfiles"
        ],
        "update": [
            "appflow:UpdateConnectorProfile",
            "kms:ListKeys",
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:CreateGrant",
            "kms:ListGrants",
            "iam:PassRole",
            "secretsmanager:CreateSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:PutResourcePolicy"
        ],
        "delete": [
            "appflow:DeleteConnectorProfile"
        ]
    },
    "AWS::AppFlow::Flow": {
        "create": [
            "appflow:CreateFlow",
            "appflow:TagResource",
            "appflow:ListTagsForResource",
            "appflow:UseConnectorProfile",
            "iam:PassRole",
            "s3:ListAllMyBuckets",
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy",
            "kms:ListGrants",
            "kms:ListKeys",
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:CreateGrant",
            "secretsmanager:CreateSecret",
            "secretsmanager:PutResourcePolicy"
        ],
        "read": [
            "appflow:DescribeFlow",
            "appflow:ListTagsForResource"
        ],
        "update": [
            "appflow:UpdateFlow",
            "appflow:TagResource",
            "appflow:UntagResource",
            "appflow:ListTagsForResource",
            "iam:PassRole",
            "s3:ListAllMyBuckets",
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy",
            "kms:ListGrants",
            "secretsmanager:CreateSecret",
            "secretsmanager:PutResourcePolicy"
        ],
        "delete": [
            "appflow:DeleteFlow"
        ]
    },
    "AWS::AppIntegrations::EventIntegration": {
        "create": [
            "app-integrations:CreateEventIntegration"
        ],
        "read": [
            "app-integrations:GetEventIntegration",
            "app-integrations:ListEventIntegrationAssociations",
            "app-integrations:ListTagsForResource"
        ],
        "update": [
            "app-integrations:GetEventIntegration",
            "app-integrations:UpdateEventIntegration",
            "app-integrations:TagResource",
            "app-integrations:UntagResource"
        ],
        "delete": [
            "app-integrations:DeleteEventIntegration"
        ]
    },
    "AWS::AppRunner::Service": {
        "create": [
            "apprunner:CreateService",
            "apprunner:TagResource",
            "iam:PassRole",
            "iam:CreateServiceLinkedRole",
            "logs:CreateLogGroup",
            "logs:PutRetentionPolicy",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:DescribeLogStreams",
            "events:PutRule",
            "events:PutTargets"
        ],
        "read": [
            "apprunner:DescribeService"
        ],
        "update": [
            "apprunner:UpdateService",
            "iam:PassRole"
        ],
        "delete": [
            "apprunner:DeleteService"
        ]
    },
    "AWS::ApplicationInsights::Application": {
        "create": [
            "applicationinsights:CreateApplication",
            "applicationinsights:DescribeApplication",
            "applicationinsights:CreateComponent",
            "applicationinsights:DescribeComponent",
            "applicationinsights:CreateLogPattern",
            "applicationinsights:DescribeLogPattern",
            "applicationinsights:DescribeComponentConfigurationRecommendation",
            "applicationinsights:UpdateComponentConfiguration",
            "applicationinsights:ListComponents"
        ],
        "read": [
            "applicationinsights:DescribeApplication",
            "applicationinsights:ListTagsForResource",
            "applicationinsights:DescribeComponent",
            "applicationinsights:ListComponents",
            "applicationinsights:DescribeLogPattern",
            "applicationinsights:ListLogPatterns",
            "applicationinsights:ListLogPatternSets"
        ],
        "update": [
            "applicationinsights:CreateApplication",
            "applicationinsights:DescribeApplication",
            "applicationinsights:UpdateApplication",
            "applicationinsights:TagResource",
            "applicationinsights:UntagResource",
            "applicationinsights:ListTagsForResource",
            "applicationinsights:CreateComponent",
            "applicationinsights:DescribeComponent",
            "applicationinsights:DeleteComponent",
            "applicationinsights:ListComponents",
            "applicationinsights:CreateLogPattern",
            "applicationinsights:DeleteLogPattern",
            "applicationinsights:DescribeLogPattern",
            "applicationinsights:ListLogPatterns",
            "applicationinsights:ListLogPatternSets",
            "applicationinsights:UpdateLogPattern",
            "applicationinsights:DescribeComponentConfiguration",
            "applicationinsights:DescribeComponentConfigurationRecommendation",
            "applicationinsights:UpdateComponentConfiguration"
        ],
        "delete": [
            "applicationinsights:DeleteApplication",
            "applicationinsights:DescribeApplication"
        ]
    },
    "AWS::Athena::DataCatalog": {
        "create": [
            "athena:CreateDataCatalog",
            "athena:TagResource"
        ],
        "read": [
            "athena:GetDataCatalog",
            "athena:ListTagsForResource"
        ],
        "update": [
            "athena:UpdateDataCatalog",
            "athena:TagResource",
            "athena:UntagResource"
        ],
        "delete": [
            "athena:DeleteDataCatalog"
        ]
    },
    "AWS::Athena::NamedQuery": {
        "create": [
            "athena:CreateNamedQuery"
        ],
        "read": [
            "athena:GetNamedQuery"
        ],
        "update": [],
        "delete": [
            "athena:DeleteNamedQuery"
        ]
    },
    "AWS::Athena::PreparedStatement": {
        "create": [
            "athena:CreatePreparedStatement"
        ],
        "read": [
            "athena:GetPreparedStatement"
        ],
        "update": [
            "athena:UpdatePreparedStatement"
        ],
        "delete": [
            "athena:DeletePreparedStatement"
        ]
    },
    "AWS::Athena::WorkGroup": {
        "create": [
            "athena:CreateWorkGroup",
            "athena:TagResource"
        ],
        "read": [
            "athena:GetWorkGroup",
            "athena:ListTagsForResource"
        ],
        "update": [
            "athena:UpdateWorkGroup",
            "athena:TagResource",
            "athena:UntagResource"
        ],
        "delete": [
            "athena:DeleteWorkGroup",
            "athena:UntagResource"
        ]
    },
    "AWS::AuditManager::Assessment": {
        "create": [
            "auditmanager:CreateAssessment",
            "auditmanager:TagResource",
            "auditmanager:ListTagsForResource",
            "iam:PassRole"
        ],
        "read": [
            "auditmanager:GetAssessment"
        ],
        "update": [
            "auditmanager:UpdateAssessment",
            "auditmanager:UpdateAssessmentStatus"
        ],
        "delete": [
            "auditmanager:DeleteAssessment"
        ]
    },
    "AWS::AutoScaling::WarmPool": {
        "create": [
            "autoscaling:PutWarmPool",
            "autoscaling:DescribeWarmPool",
            "autoscaling:DescribeAutoScalingGroups"
        ],
        "read": [
            "autoscaling:DescribeWarmPool"
        ],
        "update": [
            "autoscaling:PutWarmPool",
            "autoscaling:DescribeWarmPool",
            "autoscaling:DescribeAutoScalingGroups"
        ],
        "delete": [
            "autoscaling:DeleteWarmPool",
            "autoscaling:DescribeWarmPool"
        ]
    },
    "AWS::Backup::BackupPlan": {
        "create": [
            "backup:CreateBackupPlan"
        ],
        "read": [
            "backup:GetBackupPlan",
            "backup:ListTags"
        ],
        "update": [
            "backup:UpdateBackupPlan",
            "backup:ListTags",
            "backup:TagResource",
            "backup:UntagResource"
        ],
        "delete": [
            "backup:GetBackupPlan",
            "backup:DeleteBackupPlan"
        ]
    },
    "AWS::Backup::BackupVault": {
        "create": [
            "backup:CreateBackupVault",
            "backup:PutBackupVaultAccessPolicy",
            "backup:PutBackupVaultNotifications",
            "backup:PutBackupVaultLockConfiguration",
            "backup-storage:Mount",
            "backup-storage:MountCapsule",
            "kms:CreateGrant",
            "kms:GenerateDataKey",
            "kms:Decrypt",
            "kms:RetireGrant",
            "kms:DescribeKey"
        ],
        "read": [
            "backup:DescribeBackupVault",
            "backup:GetBackupVaultNotifications",
            "backup:GetBackupVaultAccessPolicy",
            "backup:ListTags"
        ],
        "update": [
            "backup:DescribeBackupVault",
            "backup:DeleteBackupVaultAccessPolicy",
            "backup:DeleteBackupVaultNotifications",
            "backup:DeleteBackupVaultLockConfiguration",
            "backup:ListTags",
            "backup:TagResource",
            "backup:UntagResource",
            "backup:PutBackupVaultAccessPolicy",
            "backup:PutBackupVaultNotifications",
            "backup:PutBackupVaultLockConfiguration"
        ],
        "delete": [
            "backup:DeleteBackupVault"
        ]
    },
    "AWS::Backup::Framework": {
        "create": [
            "backup:CreateFramework",
            "backup:DescribeFramework",
            "backup:TagResource",
            "iam:CreateServiceLinkedRole"
        ],
        "read": [
            "backup:DescribeFramework",
            "backup:ListTags"
        ],
        "update": [
            "backup:UpdateFramework",
            "backup:ListTags",
            "backup:TagResource",
            "backup:UntagResource"
        ],
        "delete": [
            "backup:DeleteFramework",
            "backup:DescribeFramework"
        ]
    },
    "AWS::Backup::ReportPlan": {
        "create": [
            "backup:CreateReportPlan",
            "backup:DescribeReportPlan",
            "backup:TagResource",
            "iam:CreateServiceLinkedRole"
        ],
        "read": [
            "backup:DescribeReportPlan",
            "backup:ListTags"
        ],
        "update": [
            "backup:UpdateReportPlan",
            "backup:ListTags",
            "backup:UntagResource",
            "backup:TagResource"
        ],
        "delete": [
            "backup:DeleteReportPlan",
            "backup:DescribeReportPlan"
        ]
    },
    "AWS::Budgets::BudgetsAction": {
        "create": [
            "budgets:CreateBudgetAction",
            "iam:PassRole"
        ],
        "read": [
            "budgets:DescribeBudgetAction"
        ],
        "update": [
            "budgets:UpdateBudgetAction",
            "iam:PassRole"
        ],
        "delete": [
            "budgets:DeleteBudgetAction"
        ]
    },
    "AWS::CE::AnomalyMonitor": {
        "create": [
            "ce:CreateAnomalyMonitor"
        ],
        "read": [
            "ce:GetAnomalyMonitors"
        ],
        "update": [
            "ce:UpdateAnomalyMonitor"
        ],
        "delete": [
            "ce:DeleteAnomalyMonitor"
        ]
    },
    "AWS::CE::AnomalySubscription": {
        "create": [
            "ce:CreateAnomalySubscription"
        ],
        "read": [
            "ce:GetAnomalySubscriptions"
        ],
        "update": [
            "ce:UpdateAnomalySubscription"
        ],
        "delete": [
            "ce:DeleteAnomalySubscription"
        ]
    },
    "AWS::CE::CostCategory": {
        "create": [
            "ce:CreateCostCategoryDefinition"
        ],
        "read": [
            "ce:DescribeCostCategoryDefinition"
        ],
        "update": [
            "ce:UpdateCostCategoryDefinition"
        ],
        "delete": [
            "ce:DeleteCostCategoryDefinition"
        ]
    },
    "AWS::CUR::ReportDefinition": {
        "create": [
            "cur:PutReportDefinition"
        ],
        "read": [
            "cur:DescribeReportDefinitions"
        ],
        "update": [
            "cur:DescribeReportDefinitions",
            "cur:ModifyReportDefinition"
        ],
        "delete": [
            "cur:DescribeReportDefinitions",
            "cur:DeleteReportDefinition"
        ]
    },
    "AWS::Cassandra::Keyspace": {
        "create": [
            "cassandra:Create",
            "cassandra:Select",
            "cassandra:TagResource"
        ],
        "read": [
            "cassandra:Select"
        ],
        "update": [
            "cassandra:Alter",
            "cassandra:Select",
            "cassandra:TagResource",
            "cassandra:UntagResource"
        ],
        "delete": [
            "cassandra:Drop",
            "cassandra:Select"
        ]
    },
    "AWS::Cassandra::Table": {
        "create": [
            "cassandra:Create",
            "cassandra:Select",
            "cassandra:TagResource",
            "kms:CreateGrant",
            "kms:DescribeKey",
            "kms:Encrypt",
            "kms:Decrypt"
        ],
        "read": [
            "cassandra:Select"
        ],
        "update": [
            "cassandra:Alter",
            "cassandra:Select",
            "cassandra:TagResource",
            "cassandra:UntagResource",
            "kms:CreateGrant",
            "kms:DescribeKey",
            "kms:Encrypt",
            "kms:Decrypt"
        ],
        "delete": [
            "cassandra:Drop",
            "cassandra:Select"
        ]
    },
    "AWS::CertificateManager::Account": {
        "create": [
            "acm:GetAccountConfiguration",
            "acm:PutAccountConfiguration"
        ],
        "read": [
            "acm:GetAccountConfiguration"
        ],
        "update": [
            "acm:GetAccountConfiguration",
            "acm:PutAccountConfiguration"
        ],
        "delete": [
            "acm:GetAccountConfiguration",
            "acm:PutAccountConfiguration"
        ]
    },
    "AWS::Chatbot::SlackChannelConfiguration": {
        "create": [
            "chatbot:CreateSlackChannelConfiguration",
            "iam:PassRole",
            "iam:CreateServiceLinkedRole"
        ],
        "read": [
            "chatbot:DescribeSlackChannelConfigurations"
        ],
        "update": [
            "chatbot:UpdateSlackChannelConfiguration",
            "iam:PassRole"
        ],
        "delete": [
            "chatbot:DeleteSlackChannelConfiguration"
        ]
    },
    "AWS::CloudFormation::ResourceDefaultVersion": {
        "create": [
            "cloudformation:SetTypeDefaultVersion"
        ],
        "read": [
            "cloudformation:DescribeType"
        ],
        "update": [
            "cloudformation:SetTypeDefaultVersion"
        ],
        "delete": []
    },
    "AWS::CloudFormation::StackSet": {
        "create": [
            "cloudformation:GetTemplateSummary",
            "cloudformation:CreateStackSet",
            "cloudformation:CreateStackInstances",
            "cloudformation:DescribeStackSetOperation",
            "cloudformation:TagResource"
        ],
        "read": [
            "cloudformation:DescribeStackSet",
            "cloudformation:ListStackInstances",
            "cloudformation:DescribeStackInstance"
        ],
        "update": [
            "cloudformation:GetTemplateSummary",
            "cloudformation:UpdateStackSet",
            "cloudformation:CreateStackInstances",
            "cloudformation:DeleteStackInstances",
            "cloudformation:UpdateStackInstances",
            "cloudformation:DescribeStackSetOperation",
            "cloudformation:TagResource",
            "cloudformation:UntagResource"
        ],
        "delete": [
            "cloudformation:DeleteStackSet",
            "cloudformation:DeleteStackInstances",
            "cloudformation:DescribeStackSetOperation",
            "cloudformation:UntagResource"
        ]
    },
    "AWS::CloudFormation::TypeActivation": {
        "create": [
            "cloudformation:ActivateType",
            "cloudformation:DescribeType",
            "iam:PassRole"
        ],
        "read": [
            "cloudformation:DescribeType"
        ],
        "update": [
            "cloudformation:ActivateType",
            "cloudformation:DescribeType",
            "iam:PassRole"
        ],
        "delete": [
            "cloudformation:DeactivateType",
            "cloudformation:DescribeType"
        ]
    },
    "AWS::CloudFront::CachePolicy": {
        "create": [
            "cloudfront:CreateCachePolicy"
        ],
        "read": [
            "cloudfront:GetCachePolicy"
        ],
        "update": [
            "cloudfront:UpdateCachePolicy"
        ],
        "delete": [
            "cloudfront:DeleteCachePolicy"
        ]
    },
    "AWS::CloudFront::CloudFrontOriginAccessIdentity": {
        "create": [
            "cloudfront:CreateCloudFrontOriginAccessIdentity"
        ],
        "read": [
            "cloudfront:GetCloudFrontOriginAccessIdentity"
        ],
        "update": [
            "cloudfront:UpdateCloudFrontOriginAccessIdentity"
        ],
        "delete": [
            "cloudfront:DeleteCloudFrontOriginAccessIdentity"
        ]
    },
    "AWS::CloudFront::Distribution": {
        "create": [
            "cloudfront:CreateDistribution*",
            "cloudfront:TagResource"
        ],
        "read": [
            "cloudfront:GetDistribution*"
        ],
        "update": [
            "cloudfront:GetDistribution*",
            "cloudfront:UpdateDistribution*",
            "cloudfront:ListTagsForResource*",
            "cloudfront:TagResource",
            "cloudfront:UntagResource"
        ],
        "delete": [
            "cloudfront:DeleteDistribution*"
        ]
    },
    "AWS::CloudFront::Function": {
        "create": [
            "cloudfront:CreateFunction",
            "cloudfront:PublishFunction"
        ],
        "read": [
            "cloudfront:DescribeFunction"
        ],
        "update": [
            "cloudfront:UpdateFunction",
            "cloudfront:PublishFunction"
        ],
        "delete": [
            "cloudfront:DeleteFunction"
        ]
    },
    "AWS::CloudFront::KeyGroup": {
        "create": [
            "cloudfront:CreateKeyGroup"
        ],
        "read": [
            "cloudfront:GetKeyGroup"
        ],
        "update": [
            "cloudfront:UpdateKeyGroup"
        ],
        "delete": [
            "cloudfront:DeleteKeyGroup"
        ]
    },
    "AWS::CloudFront::OriginRequestPolicy": {
        "create": [
            "cloudfront:CreateOriginRequestPolicy"
        ],
        "read": [
            "cloudfront:GetOriginRequestPolicy"
        ],
        "update": [
            "cloudfront:UpdateOriginRequestPolicy"
        ],
        "delete": [
            "cloudfront:DeleteOriginRequestPolicy"
        ]
    },
    "AWS::CloudFront::PublicKey": {
        "create": [
            "cloudfront:CreatePublicKey"
        ],
        "read": [
            "cloudfront:GetPublicKey"
        ],
        "update": [
            "cloudfront:UpdatePublicKey"
        ],
        "delete": [
            "cloudfront:DeletePublicKey"
        ]
    },
    "AWS::CloudFront::RealtimeLogConfig": {
        "create": [
            "cloudfront:CreateRealtimeLogConfig"
        ],
        "read": [
            "cloudfront:GetRealtimeLogConfig"
        ],
        "update": [
            "cloudfront:UpdateRealtimeLogConfig"
        ],
        "delete": [
            "cloudfront:DeleteRealtimeLogConfig"
        ]
    },
    "AWS::CloudTrail::Trail": {
        "create": [
            "cloudtrail:CreateTrail",
            "cloudtrail:StartLogging",
            "cloudtrail:AddTags",
            "cloudtrail:PutEventSelectors",
            "cloudtrail:PutInsightSelectors",
            "iam:GetRole",
            "iam:PassRole",
            "iam:CreateServiceLinkedRole",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization"
        ],
        "read": [
            "cloudtrail:GetTrail",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:ListTags",
            "cloudtrail:GetEventSelectors",
            "cloudtrail:GetInsightSelectors",
            "cloudtrail:DescribeTrails"
        ],
        "update": [
            "cloudtrail:UpdateTrail",
            "cloudtrail:StartLogging",
            "cloudtrail:StopLogging",
            "cloudtrail:AddTags",
            "cloudtrail:RemoveTags",
            "cloudtrail:PutEventSelectors",
            "cloudtrail:PutInsightSelectors",
            "iam:GetRole",
            "iam:PassRole",
            "iam:CreateServiceLinkedRole",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "cloudtrail:GetTrail",
            "cloudtrail:DescribeTrails"
        ],
        "delete": [
            "cloudtrail:DeleteTrail"
        ]
    },
    "AWS::CloudWatch::CompositeAlarm": {
        "create": [
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutCompositeAlarm"
        ],
        "read": [
            "cloudwatch:DescribeAlarms"
        ],
        "update": [
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutCompositeAlarm"
        ],
        "delete": [
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DeleteAlarms"
        ]
    },
    "AWS::CloudWatch::MetricStream": {
        "create": [
            "cloudwatch:PutMetricStream",
            "iam:PassRole"
        ],
        "read": [
            "cloudwatch:GetMetricStream"
        ],
        "update": [
            "cloudwatch:PutMetricStream",
            "iam:PassRole"
        ],
        "delete": [
            "cloudwatch:DeleteMetricStream"
        ]
    },
    "AWS::CodeArtifact::Domain": {
        "create": [
            "codeartifact:CreateDomain",
            "codeartifact:PutDomainPermissionsPolicy",
            "codeartifact:GetDomainPermissionsPolicy",
            "codeartifact:TagResource"
        ],
        "read": [
            "codeartifact:DescribeDomain",
            "codeartifact:GetDomainPermissionsPolicy",
            "codeartifact:ListTagsForResource"
        ],
        "update": [
            "codeartifact:PutDomainPermissionsPolicy",
            "codeartifact:DeleteDomainPermissionsPolicy",
            "codeartifact:GetDomainPermissionsPolicy",
            "codeartifact:TagResource",
            "codeartifact:UntagResource"
        ],
        "delete": [
            "codeartifact:DeleteDomain",
            "codeartifact:DescribeDomain"
        ]
    },
    "AWS::CodeArtifact::Repository": {
        "create": [
            "codeartifact:CreateRepository",
            "codeartifact:DescribeRepository",
            "codeartifact:PutRepositoryPermissionsPolicy",
            "codeartifact:AssociateExternalConnection",
            "codeartifact:AssociateWithDownstreamRepository",
            "codeartifact:TagResource"
        ],
        "read": [
            "codeartifact:DescribeRepository",
            "codeartifact:GetRepositoryPermissionsPolicy",
            "codeartifact:ListTagsForResource"
        ],
        "update": [
            "codeartifact:PutRepositoryPermissionsPolicy",
            "codeartifact:DeleteRepositoryPermissionsPolicy",
            "codeartifact:AssociateExternalConnection",
            "codeartifact:DisassociateExternalConnection",
            "codeartifact:UpdateRepository",
            "codeartifact:AssociateWithDownstreamRepository",
            "codeartifact:TagResource",
            "codeartifact:UntagResource"
        ],
        "delete": [
            "codeartifact:DeleteRepository"
        ]
    },
    "AWS::CodeGuruProfiler::ProfilingGroup": {
        "create": [
            "sns:Publish",
            "codeguru-profiler:AddNotificationChannels",
            "codeguru-profiler:CreateProfilingGroup",
            "codeguru-profiler:PutPermission",
            "codeguru-profiler:TagResource"
        ],
        "read": [
            "codeguru-profiler:DescribeProfilingGroup",
            "codeguru-profiler:ListTagsForResource"
        ],
        "update": [
            "sns:Publish",
            "codeguru-profiler:AddNotificationChannels",
            "codeguru-profiler:GetNotificationConfiguration",
            "codeguru-profiler:RemoveNotificationChannel",
            "codeguru-profiler:PutPermission",
            "codeguru-profiler:RemovePermission",
            "codeguru-profiler:GetPolicy",
            "codeguru-profiler:TagResource",
            "codeguru-profiler:UntagResource",
            "codeguru-profiler:ListTagsForResource"
        ],
        "delete": [
            "codeguru-profiler:DeleteProfilingGroup"
        ]
    },
    "AWS::CodeStarConnections::Connection": {
        "create": [
            "codestar-connections:CreateConnection",
            "codestar-connections:TagResource"
        ],
        "read": [
            "codestar-connections:GetConnection",
            "codestar-connections:ListTagsForResource"
        ],
        "update": [
            "codestar-connections:ListTagsForResource",
            "codestar-connections:TagResource",
            "codestar-connections:UntagResource"
        ],
        "delete": [
            "codestar-connections:DeleteConnection"
        ]
    },
    "AWS::CodeStarNotifications::NotificationRule": {
        "create": [
            "codestar-notifications:createNotificationRule"
        ],
        "read": [
            "codestar-notifications:describeNotificationRule"
        ],
        "update": [
            "codestar-notifications:updateNotificationRule"
        ],
        "delete": [
            "codestar-notifications:deleteNotificationRule",
            "codestar-notifications:describeNotificationRule"
        ]
    },
    "AWS::Config::AggregationAuthorization": {
        "create": [
            "config:DescribeAggregationAuthorizations",
            "config:PutAggregationAuthorization",
            "config:TagResource"
        ],
        "read": [
            "config:DescribeAggregationAuthorizations",
            "config:ListTagsForResource"
        ],
        "update": [
            "config:DescribeAggregationAuthorizations",
            "config:TagResource",
            "config:UntagResource",
            "config:ListTagsForResource"
        ],
        "delete": [
            "config:DescribeAggregationAuthorizations",
            "config:DeleteAggregationAuthorization",
            "config:UntagResource"
        ]
    },
    "AWS::Config::ConfigurationAggregator": {
        "create": [
            "config:PutConfigurationAggregator",
            "config:DescribeConfigurationAggregators",
            "config:TagResource",
            "iam:PassRole",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListDelegatedAdministrators"
        ],
        "read": [
            "config:DescribeConfigurationAggregators",
            "config:ListTagsForResource"
        ],
        "update": [
            "config:PutConfigurationAggregator",
            "config:DescribeConfigurationAggregators",
            "config:TagResource",
            "config:UntagResource",
            "config:ListTagsForResource",
            "iam:PassRole",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListDelegatedAdministrators"
        ],
        "delete": [
            "config:DeleteConfigurationAggregator",
            "config:UntagResource"
        ]
    },
    "AWS::Config::ConformancePack": {
        "create": [
            "config:PutConformancePack",
            "config:DescribeConformancePackStatus",
            "s3:GetObject",
            "s3:GetBucketAcl",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole"
        ],
        "read": [
            "config:DescribeConformancePacks"
        ],
        "update": [
            "config:PutConformancePack",
            "config:DescribeConformancePackStatus",
            "s3:GetObject",
            "s3:GetBucketAcl",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole"
        ],
        "delete": [
            "config:DeleteConformancePack",
            "config:DescribeConformancePackStatus"
        ]
    },
    "AWS::Config::OrganizationConformancePack": {
        "create": [
            "config:PutOrganizationConformancePack",
            "config:DescribeOrganizationConformancePackStatuses",
            "config:GetOrganizationConformancePackDetailedStatus",
            "s3:GetObject",
            "s3:GetBucketAcl",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole",
            "organizations:ListDelegatedAdministrators",
            "organizations:EnableAWSServiceAccess"
        ],
        "read": [
            "config:DescribeOrganizationConformancePacks"
        ],
        "update": [
            "config:PutOrganizationConformancePack",
            "config:DescribeOrganizationConformancePackStatuses",
            "config:GetOrganizationConformancePackDetailedStatus",
            "s3:GetObject",
            "s3:GetBucketAcl",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole",
            "organizations:ListDelegatedAdministrators",
            "organizations:EnableAWSServiceAccess"
        ],
        "delete": [
            "config:DeleteOrganizationConformancePack",
            "config:DescribeOrganizationConformancePackStatuses",
            "config:GetOrganizationConformancePackDetailedStatus",
            "organizations:ListDelegatedAdministrators"
        ]
    },
    "AWS::Config::StoredQuery": {
        "create": [
            "config:PutStoredQuery",
            "config:GetStoredQuery",
            "config:TagResource"
        ],
        "read": [
            "config:GetStoredQuery",
            "config:ListTagsForResource"
        ],
        "update": [
            "config:PutStoredQuery",
            "config:GetStoredQuery",
            "config:TagResource",
            "config:UntagResource",
            "config:ListTagsForResource"
        ],
        "delete": [
            "config:DeleteStoredQuery",
            "config:UntagResource"
        ]
    },
    "AWS::Connect::QuickConnect": {
        "create": [
            "connect:CreateQuickConnect",
            "connect:TagResource"
        ],
        "read": [
            "connect:DescribeQuickConnect"
        ],
        "update": [
            "connect:UpdateQuickConnectName",
            "connect:UpdateQuickConnectConfig",
            "connect:TagResource",
            "connect:UntagResource"
        ],
        "delete": [
            "connect:DeleteQuickConnect",
            "connect:UntagResource"
        ]
    },
    "AWS::CustomerProfiles::Domain": {
        "create": [
            "profile:CreateDomain"
        ],
        "read": [
            "profile:GetDomain"
        ],
        "update": [
            "profile:UpdateDomain",
            "profile:UntagResource",
            "profile:TagResource"
        ],
        "delete": [
            "profile:DeleteDomain"
        ]
    },
    "AWS::CustomerProfiles::Integration": {
        "create": [
            "profile:GetIntegration",
            "profile:PutIntegration",
            "appflow:CreateFlow"
        ],
        "read": [
            "profile:GetIntegration"
        ],
        "update": [
            "profile:PutIntegration",
            "profile:GetIntegration",
            "profile:UntagResource",
            "profile:TagResource"
        ],
        "delete": [
            "profile:DeleteIntegration",
            "appflow:DeleteFlow"
        ]
    },
    "AWS::CustomerProfiles::ObjectType": {
        "create": [
            "profile:GetProfileObjectType",
            "profile:PutProfileObjectType"
        ],
        "read": [
            "profile:GetProfileObjectType"
        ],
        "update": [
            "profile:GetProfileObjectType",
            "profile:PutProfileObjectType",
            "profile:UntagResource",
            "profile:TagResource"
        ],
        "delete": [
            "profile:DeleteProfileObjectType"
        ]
    },
    "AWS::DataBrew::Dataset": {
        "create": [
            "databrew:CreateDataset",
            "databrew:TagResource",
            "databrew:UntagResource",
            "glue:GetConnection",
            "glue:GetTable",
            "iam:PassRole"
        ],
        "read": [
            "databrew:DescribeDataset",
            "databrew:ListTagsForResource",
            "iam:ListRoles"
        ],
        "update": [
            "databrew:UpdateDataset",
            "glue:GetConnection",
            "glue:GetTable"
        ],
        "delete": [
            "databrew:DeleteDataset"
        ]
    },
    "AWS::DataBrew::Job": {
        "create": [
            "databrew:CreateProfileJob",
            "databrew:CreateRecipeJob",
            "databrew:TagResource",
            "databrew:UntagResource",
            "iam:PassRole"
        ],
        "read": [
            "databrew:DescribeJob",
            "databrew:ListTagsForResource",
            "iam:ListRoles"
        ],
        "update": [
            "databrew:UpdateProfileJob",
            "databrew:UpdateRecipeJob"
        ],
        "delete": [
            "databrew:DeleteJob"
        ]
    },
    "AWS::DataBrew::Project": {
        "create": [
            "databrew:CreateProject",
            "databrew:TagResource",
            "databrew:UntagResource",
            "iam:PassRole"
        ],
        "read": [
            "databrew:ReadProject",
            "databrew:ListTagsForResource",
            "iam:ListRoles"
        ],
        "update": [
            "databrew:UpdateProject"
        ],
        "delete": [
            "databrew:DeleteProject"
        ]
    },
    "AWS::DataBrew::Recipe": {
        "create": [
            "databrew:CreateRecipe",
            "databrew:TagResource",
            "databrew:UntagResource",
            "iam:PassRole"
        ],
        "read": [
            "databrew:DescribeRecipe",
            "databrew:ListTagsForResource",
            "iam:ListRoles"
        ],
        "update": [
            "databrew:UpdateRecipe"
        ],
        "delete": [
            "databrew:DeleteRecipeVersion"
        ]
    },
    "AWS::DataBrew::Schedule": {
        "create": [
            "databrew:CreateSchedule",
            "databrew:TagResource",
            "databrew:UntagResource",
            "iam:PassRole"
        ],
        "read": [
            "databrew:DescribeSchedule",
            "databrew:ListTagsForResource",
            "iam:ListRoles"
        ],
        "update": [
            "databrew:UpdateSchedule"
        ],
        "delete": [
            "databrew:DeleteSchedule"
        ]
    },
    "AWS::DataSync::Agent": {
        "create": [
            "datasync:CreateAgent",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints"
        ],
        "read": [
            "datasync:DescribeAgent",
            "datasync:ListTagsForResource"
        ],
        "update": [
            "datasync:UpdateAgent",
            "datasync:DescribeAgent",
            "datasync:ListTagsForResource",
            "datasync:TagResource",
            "datasync:UntagResource"
        ],
        "delete": [
            "datasync:DeleteAgent"
        ]
    },
    "AWS::DataSync::LocationEFS": {
        "create": [
            "datasync:CreateLocationEfs",
            "datasync:DescribeLocationEfs",
            "datasync:ListTagsForResource",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeMountTargets",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups"
        ],
        "read": [
            "datasync:DescribeLocationEfs",
            "datasync:ListTagsForResource"
        ],
        "update": [
            "datasync:DescribeLocationEfs",
            "datasync:ListTagsForResource",
            "datasync:TagResource",
            "datasync:UntagResource"
        ],
        "delete": [
            "datasync:DeleteLocation"
        ]
    },
    "AWS::DataSync::LocationFSxWindows": {
        "create": [
            "datasync:CreateLocationFsxWindows",
            "datasync:DescribeLocationFsxWindows",
            "datasync:ListTagsForResource",
            "fsx:DescribeFileSystems",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups"
        ],
        "read": [
            "datasync:DescribeLocationFsxWindows",
            "datasync:ListTagsForResource"
        ],
        "update": [
            "datasync:DescribeLocationFsxWindows",
            "datasync:ListTagsForResource",
            "datasync:TagResource",
            "datasync:UntagResource"
        ],
        "delete": [
            "datasync:DeleteLocation"
        ]
    },
    "AWS::DataSync::LocationNFS": {
        "create": [
            "datasync:CreateLocationNfs",
            "datasync:DescribeLocationNfs",
            "datasync:ListTagsForResource"
        ],
        "read": [
            "datasync:DescribeLocationNfs",
            "datasync:ListTagsForResource"
        ],
        "update": [
            "datasync:DescribeLocationNfs",
            "datasync:ListTagsForResource",
            "datasync:TagResource",
            "datasync:UntagResource",
            "datasync:UpdateLocationNfs"
        ],
        "delete": [
            "datasync:DeleteLocation"
        ]
    },
    "AWS::DataSync::LocationObjectStorage": {
        "create": [
            "datasync:CreateLocationObjectStorage",
            "datasync:DescribeLocationObjectStorage",
            "datasync:ListTagsForResource"
        ],
        "read": [
            "datasync:DescribeLocationObjectStorage",
            "datasync:ListTagsForResource"
        ],
        "update": [
            "datasync:DescribeLocationObjectStorage",
            "datasync:ListTagsForResource",
            "datasync:TagResource",
            "datasync:UntagResource",
            "datasync:UpdateLocationObjectStorage"
        ],
        "delete": [
            "datasync:DeleteLocation"
        ]
    },
    "AWS::DataSync::LocationS3": {
        "create": [
            "datasync:CreateLocationS3",
            "datasync:DescribeLocationS3",
            "datasync:ListTagsForResource",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "iam:GetRole",
            "iam:PassRole"
        ],
        "read": [
            "datasync:DescribeLocationS3",
            "datasync:ListTagsForResource"
        ],
        "update": [
            "datasync:DescribeLocationS3",
            "datasync:ListTagsForResource",
            "datasync:TagResource",
            "datasync:UntagResource"
        ],
        "delete": [
            "datasync:DeleteLocation"
        ]
    },
    "AWS::DataSync::LocationSMB": {
        "create": [
            "datasync:CreateLocationSmb",
            "datasync:DescribeLocationSmb",
            "datasync:ListTagsForResource"
        ],
        "read": [
            "datasync:DescribeLocationSmb",
            "datasync:ListTagsForResource"
        ],
        "update": [
            "datasync:DescribeLocationSmb",
            "datasync:ListTagsForResource",
            "datasync:TagResource",
            "datasync:UntagResource",
            "datasync:UpdateLocationSmb"
        ],
        "delete": [
            "datasync:DeleteLocation"
        ]
    },
    "AWS::DataSync::Task": {
        "create": [
            "datasync:CreateTask",
            "datasync:DescribeTask",
            "datasync:ListTagsForResource",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "ec2:DescribeNetworkInterfaces",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:CreateNetworkInterfacePermission",
            "fsx:DescribeFileSystems",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeMountTargets",
            "logs:DescribeLogGroups",
            "iam:GetRole"
        ],
        "read": [
            "datasync:DescribeTask",
            "datasync:ListTagsForResource"
        ],
        "update": [
            "datasync:UpdateTask",
            "datasync:DescribeTask",
            "datasync:ListTagsForResource",
            "datasync:TagResource",
            "datasync:UntagResource",
            "logs:DescribeLogGroups"
        ],
        "delete": [
            "datasync:DeleteTask",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "fsx:DescribeFileSystems",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeMountTargets",
            "iam:GetRole"
        ]
    },
    "AWS::Detective::Graph": {
        "create": [
            "detective:CreateGraph"
        ],
        "read": [
            "detective:ListGraphs",
            "detective:ListTagsForResource"
        ],
        "update": [
            "detective:UntagResource",
            "detective:TagResource",
            "detective:ListTagsForResource"
        ],
        "delete": [
            "detective:DeleteGraph"
        ]
    },
    "AWS::Detective::MemberInvitation": {
        "create": [
            "detective:CreateMembers",
            "detective:GetMembers"
        ],
        "read": [
            "detective:GetMembers"
        ],
        "update": [],
        "delete": [
            "detective:DeleteMembers"
        ]
    },
    "AWS::DevOpsGuru::ResourceCollection": {
        "create": [
            "devops-guru:UpdateResourceCollection",
            "devops-guru:GetResourceCollection"
        ],
        "read": [
            "devops-guru:GetResourceCollection"
        ],
        "update": [
            "devops-guru:UpdateResourceCollection",
            "devops-guru:GetResourceCollection"
        ],
        "delete": [
            "devops-guru:UpdateResourceCollection"
        ]
    },
    "AWS::DynamoDB::GlobalTable": {
        "create": [
            "dynamodb:CreateTable",
            "dynamodb:CreateTableReplica",
            "dynamodb:Describe*",
            "dynamodb:UpdateTimeToLive",
            "dynamodb:UpdateContributorInsights",
            "dynamodb:UpdateContinuousBackups",
            "dynamodb:ListTagsOfResource",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:UpdateItem",
            "dynamodb:PutItem",
            "dynamodb:GetItem",
            "dynamodb:DeleteItem",
            "dynamodb:BatchWriteItem",
            "dynamodb:TagResource",
            "dynamodb:EnableKinesisStreamingDestination",
            "dynamodb:DisableKinesisStreamingDestination",
            "dynamodb:DescribeTableReplicaAutoScaling",
            "dynamodb:UpdateTableReplicaAutoScaling",
            "dynamodb:TagResource",
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeleteScheduledAction",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:Describe*",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:PutScheduledAction",
            "application-autoscaling:RegisterScalableTarget",
            "kms:CreateGrant",
            "kms:Describe*",
            "kms:Get*",
            "kms:List*",
            "kms:RevokeGrant",
            "cloudwatch:PutMetricData"
        ],
        "read": [
            "dynamodb:Describe*",
            "application-autoscaling:Describe*",
            "cloudwatch:PutMetricData"
        ],
        "update": [
            "dynamodb:Describe*",
            "dynamodb:CreateTableReplica",
            "dynamodb:UpdateTable",
            "dynamodb:UpdateTimeToLive",
            "dynamodb:UpdateContinuousBackups",
            "dynamodb:UpdateContributorInsights",
            "dynamodb:ListTagsOfResource",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:UpdateItem",
            "dynamodb:PutItem",
            "dynamodb:GetItem",
            "dynamodb:DeleteItem",
            "dynamodb:BatchWriteItem",
            "dynamodb:DeleteTable",
            "dynamodb:DeleteTableReplica",
            "dynamodb:UpdateItem",
            "dynamodb:TagResource",
            "dynamodb:UntagResource",
            "dynamodb:EnableKinesisStreamingDestination",
            "dynamodb:DisableKinesisStreamingDestination",
            "dynamodb:DescribeTableReplicaAutoScaling",
            "dynamodb:UpdateTableReplicaAutoScaling",
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeleteScheduledAction",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:Describe*",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:PutScheduledAction",
            "application-autoscaling:RegisterScalableTarget",
            "kms:CreateGrant",
            "kms:Describe*",
            "kms:Get*",
            "kms:List*",
            "kms:RevokeGrant",
            "cloudwatch:PutMetricData"
        ],
        "delete": [
            "dynamodb:Describe*",
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeleteScheduledAction",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:Describe*",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:PutScheduledAction",
            "application-autoscaling:RegisterScalableTarget"
        ]
    },
    "AWS::EC2::CarrierGateway": {
        "create": [
            "ec2:CreateCarrierGateway",
            "ec2:DescribeCarrierGateways",
            "ec2:CreateTags"
        ],
        "read": [
            "ec2:DescribeCarrierGateways"
        ],
        "update": [
            "ec2:DescribeCarrierGateways",
            "ec2:CreateTags",
            "ec2:DeleteTags"
        ],
        "delete": [
            "ec2:DeleteCarrierGateway",
            "ec2:DescribeCarrierGateways"
        ]
    },
    "AWS::EC2::DHCPOptions": {
        "create": [
            "ec2:CreateDhcpOptions",
            "ec2:DescribeDhcpOptions",
            "ec2:CreateTags"
        ],
        "read": [
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeTags"
        ],
        "update": [
            "ec2:CreateTags",
            "ec2:DescribeDhcpOptions",
            "ec2:DeleteTags"
        ],
        "delete": [
            "ec2:DeleteDhcpOptions",
            "ec2:DeleteTags"
        ]
    },
    "AWS::EC2::EC2Fleet": {
        "create": [
            "ec2:CreateFleet",
            "ec2:DescribeFleets"
        ],
        "read": [
            "ec2:DescribeFleets"
        ],
        "update": [
            "ec2:ModifyFleet",
            "ec2:DescribeFleets"
        ],
        "delete": [
            "ec2:DescribeFleets",
            "ec2:DeleteFleets"
        ]
    },
    "AWS::EC2::FlowLog": {
        "create": [
            "ec2:CreateFlowLogs",
            "ec2:CreateTags",
            "iam:PassRole",
            "logs:CreateLogDelivery",
            "s3:GetBucketPolicy",
            "s3:PutBucketPolicy"
        ],
        "read": [
            "ec2:DescribeFlowLogs"
        ],
        "update": [
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "ec2:DescribeFlowLogs"
        ],
        "delete": [
            "ec2:DeleteFlowLogs",
            "logs:DeleteLogDelivery"
        ]
    },
    "AWS::EC2::GatewayRouteTableAssociation": {
        "create": [
            "ec2:AssociateRouteTable"
        ],
        "read": [
            "ec2:DescribeRouteTables"
        ],
        "update": [
            "ec2:DescribeRouteTables",
            "ec2:ReplaceRouteTableAssociation"
        ],
        "delete": [
            "ec2:DescribeRouteTables",
            "ec2:DisassociateRouteTable"
        ]
    },
    "AWS::EC2::LocalGatewayRouteTableVPCAssociation": {
        "create": [
            "ec2:CreateLocalGatewayRouteTableVpcAssociation",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
            "ec2:CreateTags"
        ],
        "read": [
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations"
        ],
        "update": [
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
            "ec2:CreateTags",
            "ec2:DeleteTags"
        ],
        "delete": [
            "ec2:DeleteLocalGatewayRouteTableVpcAssociation",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations"
        ]
    },
    "AWS::EC2::NetworkInsightsAnalysis": {
        "create": [
            "ec2:StartNetworkInsightsAnalysis",
            "ec2:GetTransitGatewayRouteTablePropagations",
            "ec2:DescribeTransitGatewayPeeringAttachments",
            "ec2:SearchTransitGatewayRoutes",
            "ec2:DescribeTransitGatewayRouteTables",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGateways",
            "ec2:GetManagedPrefixListEntries",
            "ec2:DescribeManagedPrefixLists",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRegions",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "directconnect:DescribeConnections",
            "directconnect:DescribeDirectConnectGateways",
            "directconnect:DescribeDirectConnectGatewayAssociations",
            "directconnect:DescribeDirectConnectGatewayAttachments",
            "directconnect:DescribeVirtualGateways",
            "directconnect:DescribeVirtualInterfaces",
            "tiros:CreateQuery",
            "tiros:GetQueryAnswer",
            "tiros:GetQueryExplanation"
        ],
        "read": [
            "ec2:DescribeNetworkInsightsAnalyses"
        ],
        "update": [
            "ec2:CreateTags",
            "ec2:DescribeNetworkInsightsAnalyses",
            "ec2:DeleteTags"
        ],
        "delete": [
            "ec2:DeleteNetworkInsightsAnalysis"
        ]
    },
    "AWS::EC2::NetworkInsightsPath": {
        "create": [
            "ec2:CreateNetworkInsightsPath"
        ],
        "read": [
            "ec2:DescribeNetworkInsightsPaths"
        ],
        "update": [
            "ec2:DescribeNetworkInsightsPaths",
            "ec2:CreateTags",
            "ec2:DeleteTags"
        ],
        "delete": [
            "ec2:DeleteNetworkInsightsPath"
        ]
    },
    "AWS::EC2::PrefixList": {
        "create": [
            "ec2:CreateManagedPrefixList",
            "ec2:DescribeManagedPrefixLists"
        ],
        "read": [
            "ec2:GetManagedPrefixListEntries",
            "ec2:DescribeManagedPrefixLists"
        ],
        "update": [
            "ec2:DescribeManagedPrefixLists",
            "ec2:GetManagedPrefixListEntries",
            "ec2:ModifyManagedPrefixList",
            "ec2:CreateTags",
            "ec2:DeleteTags"
        ],
        "delete": [
            "ec2:DeleteManagedPrefixList",
            "ec2:DescribeManagedPrefixLists"
        ]
    },
    "AWS::EC2::SpotFleet": {
        "create": [
            "ec2:RequestSpotFleet",
            "ec2:DescribeSpotFleetRequests"
        ],
        "read": [
            "ec2:DescribeSpotFleetRequests"
        ],
        "update": [
            "ec2:ModifySpotFleetRequest",
            "ec2:DescribeSpotFleetRequests"
        ],
        "delete": [
            "ec2:DescribeSpotFleetRequests",
            "ec2:CancelSpotFleetRequests"
        ]
    },
    "AWS::EC2::TransitGateway": {
        "create": [
            "ec2:CreateTransitGateway",
            "ec2:CreateTags"
        ],
        "read": [
            "ec2:DescribeTransitGateways",
            "ec2:DescribeTags"
        ],
        "update": [
            "ec2:ModifyTransitGateway",
            "ec2:DeleteTags",
            "ec2:CreateTags",
            "ec2:ModifyTransitGatewayOptions"
        ],
        "delete": [
            "ec2:DeleteTransitGateway",
            "ec2:DeleteTags"
        ]
    },
    "AWS::EC2::TransitGatewayConnect": {
        "create": [
            "ec2:CreateTransitGatewayConnect",
            "ec2:DescribeTransitGatewayConnects",
            "ec2:CreateTags"
        ],
        "read": [
            "ec2:DescribeTransitGatewayConnects"
        ],
        "update": [
            "ec2:DescribeTransitGatewayConnects",
            "ec2:DeleteTags",
            "ec2:CreateTags"
        ],
        "delete": [
            "ec2:DeleteTransitGatewayConnect",
            "ec2:DescribeTransitGatewayConnects",
            "ec2:DeleteTags"
        ]
    },
    "AWS::EC2::TransitGatewayMulticastDomain": {
        "create": [
            "ec2:DescribeTransitGatewayMulticastDomains",
            "ec2:CreateTransitGatewayMulticastDomain",
            "ec2:CreateTags"
        ],
        "read": [
            "ec2:DescribeTransitGatewayMulticastDomains"
        ],
        "update": [
            "ec2:DescribeTransitGatewayMulticastDomains",
            "ec2:DeleteTags",
            "ec2:CreateTags"
        ],
        "delete": [
            "ec2:DescribeTransitGatewayMulticastDomains",
            "ec2:DeleteTransitGatewayMulticastDomain",
            "ec2:DeleteTags"
        ]
    },
    "AWS::EC2::TransitGatewayPeeringAttachment": {
        "create": [
            "ec2:CreateTransitGatewayPeeringAttachment",
            "ec2:DescribeTransitGatewayPeeringAttachments"
        ],
        "read": [
            "ec2:DescribeTransitGatewayPeeringAttachments"
        ],
        "update": [
            "ec2:DescribeTransitGatewayPeeringAttachments"
        ],
        "delete": [
            "ec2:DeleteTransitGatewayPeeringAttachment",
            "ec2:DescribeTransitGatewayPeeringAttachments"
        ]
    },
    "AWS::EC2::TransitGatewayVpcAttachment": {
        "create": [
            "ec2:CreateTransitGatewayVpcAttachment",
            "ec2:CreateTags"
        ],
        "read": [
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeTags"
        ],
        "update": [
            "ec2:ModifyTransitGatewayVpcAttachment",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DeleteTags",
            "ec2:CreateTags"
        ],
        "delete": [
            "ec2:DeleteTransitGatewayVpcAttachment",
            "ec2:DeleteTags"
        ]
    },
    "AWS::ECR::PublicRepository": {
        "create": [
            "ecr-public:CreateRepository",
            "ecr-public:SetRepositoryPolicy",
            "ecr-public:PutRepositoryCatalogData",
            "ecr-public:TagResource"
        ],
        "read": [
            "ecr-public:DescribeRepositories",
            "ecr-public:GetRepositoryPolicy",
            "ecr-public:GetRepositoryCatalogData",
            "ecr-public:ListTagsForResource"
        ],
        "update": [
            "ecr-public:SetRepositoryPolicy",
            "ecr-public:DeleteRepositoryPolicy",
            "ecr-public:PutRepositoryCatalogData",
            "ecr-public:TagResource",
            "ecr-public:UntagResource"
        ],
        "delete": [
            "ecr-public:DeleteRepository"
        ]
    },
    "AWS::ECR::RegistryPolicy": {
        "create": [
            "ecr:PutRegistryPolicy"
        ],
        "read": [
            "ecr:GetRegistryPolicy"
        ],
        "update": [
            "ecr:PutRegistryPolicy"
        ],
        "delete": [
            "ecr:DeleteRegistryPolicy"
        ]
    },
    "AWS::ECR::ReplicationConfiguration": {
        "create": [
            "ecr:DescribeRegistry",
            "ecr:PutReplicationConfiguration",
            "iam:CreateServiceLinkedRole"
        ],
        "read": [
            "ecr:DescribeRegistry"
        ],
        "update": [
            "ecr:DescribeRegistry",
            "ecr:PutReplicationConfiguration",
            "iam:CreateServiceLinkedRole"
        ],
        "delete": [
            "ecr:DescribeRegistry",
            "ecr:PutReplicationConfiguration",
            "iam:CreateServiceLinkedRole"
        ]
    },
    "AWS::ECR::Repository": {
        "create": [
            "ecr:CreateRepository",
            "ecr:PutLifecyclePolicy",
            "ecr:SetRepositoryPolicy",
            "ecr:TagResource",
            "kms:DescribeKey",
            "kms:CreateGrant",
            "kms:RetireGrant"
        ],
        "read": [
            "ecr:DescribeRepositories",
            "ecr:GetLifecyclePolicy",
            "ecr:GetRepositoryPolicy",
            "ecr:ListTagsForResource"
        ],
        "update": [
            "ecr:PutLifecyclePolicy",
            "ecr:SetRepositoryPolicy",
            "ecr:TagResource",
            "ecr:UntagResource",
            "ecr:DeleteLifecyclePolicy",
            "ecr:DeleteRepositoryPolicy",
            "ecr:PutImageScanningConfiguration",
            "ecr:PutImageTagMutability",
            "kms:DescribeKey",
            "kms:CreateGrant",
            "kms:RetireGrant"
        ],
        "delete": [
            "ecr:DeleteRepository",
            "kms:RetireGrant"
        ]
    },
    "AWS::ECS::CapacityProvider": {
        "create": [
            "autoscaling:CreateOrUpdateTags",
            "ecs:CreateCapacityProvider",
            "ecs:DescribeCapacityProviders"
        ],
        "read": [
            "ecs:DescribeCapacityProviders"
        ],
        "update": [
            "ecs:UpdateCapacityProvider",
            "ecs:DescribeCapacityProviders",
            "ecs:ListTagsForResource",
            "ecs:TagResource",
            "ecs:UntagResource"
        ],
        "delete": [
            "ecs:DescribeCapacityProviders",
            "ecs:DeleteCapacityProvider"
        ]
    },
    "AWS::ECS::Cluster": {
        "create": [
            "ecs:CreateCluster",
            "ecs:DescribeClusters",
            "iam:CreateServiceLinkedRole"
        ],
        "read": [
            "ecs:DescribeClusters"
        ],
        "update": [
            "ecs:PutAccountSettingDefault",
            "ecs:DescribeClusters",
            "ecs:TagResource",
            "ecs:UntagResource",
            "ecs:PutAccountSetting",
            "ecs:ListTagsForResource",
            "ecs:UpdateCluster",
            "ecs:UpdateClusterSettings",
            "ecs:PutClusterCapacityProviders"
        ],
        "delete": [
            "ecs:DeleteCluster",
            "ecs:DescribeClusters"
        ]
    },
    "AWS::ECS::ClusterCapacityProviderAssociations": {
        "create": [
            "ecs:DescribeClusters",
            "ecs:PutClusterCapacityProviders"
        ],
        "read": [
            "ecs:DescribeClusters"
        ],
        "update": [
            "ecs:DescribeClusters",
            "ecs:PutClusterCapacityProviders"
        ],
        "delete": [
            "ecs:PutClusterCapacityProviders",
            "ecs:DescribeClusters"
        ]
    },
    "AWS::ECS::PrimaryTaskSet": {
        "create": [
            "ecs:DescribeTaskSets",
            "ecs:UpdateServicePrimaryTaskSet"
        ],
        "read": [],
        "update": [
            "ecs:DescribeTaskSets",
            "ecs:UpdateServicePrimaryTaskSet"
        ],
        "delete": []
    },
    "AWS::ECS::Service": {
        "create": [
            "ecs:CreateService",
            "ecs:DescribeServices",
            "iam:PassRole"
        ],
        "read": [
            "ecs:DescribeServices"
        ],
        "update": [
            "ecs:DescribeServices",
            "ecs:ListTagsForResource",
            "ecs:TagResource",
            "ecs:UntagResource",
            "ecs:UpdateService"
        ],
        "delete": [
            "ecs:DeleteService",
            "ecs:DescribeServices"
        ]
    },
    "AWS::ECS::TaskDefinition": {
        "create": [
            "ecs:RegisterTaskDefinition",
            "iam:GetRole",
            "iam:PassRole"
        ],
        "read": [
            "ecs:DescribeTaskDefinition"
        ],
        "update": [
            "ecs:TagResource",
            "ecs:UntagResource",
            "ecs:ListTagsForResource",
            "iam:GetRole",
            "iam:PassRole"
        ],
        "delete": [
            "ecs:DeregisterTaskDefinition",
            "iam:GetRole",
            "iam:PassRole"
        ]
    },
    "AWS::ECS::TaskSet": {
        "create": [
            "ecs:CreateTaskSet",
            "ecs:DescribeTaskSets"
        ],
        "read": [
            "ecs:DescribeTaskSets"
        ],
        "update": [
            "ecs:UpdateTaskSet",
            "ecs:DescribeTaskSets"
        ],
        "delete": [
            "ecs:DeleteTaskSet",
            "ecs:DescribeTaskSets"
        ]
    },
    "AWS::EFS::AccessPoint": {
        "create": [
            "elasticfilesystem:CreateAccessPoint"
        ],
        "read": [
            "elasticfilesystem:DescribeAccessPoints"
        ],
        "update": [
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:ListTagsForResource",
            "elasticfilesystem:TagResource",
            "elasticfilesystem:UntagResource"
        ],
        "delete": [
            "elasticfilesystem:DeleteAccessPoint"
        ]
    },
    "AWS::EFS::FileSystem": {
        "create": [
            "elasticfilesystem:CreateFileSystem",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:PutBackupPolicy",
            "elasticfilesystem:PutFileSystemPolicy",
            "elasticfilesystem:PutLifecycleConfiguration"
        ],
        "read": [
            "elasticfilesystem:DescribeBackupPolicy",
            "elasticfilesystem:DescribeFileSystemPolicy",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeLifecycleConfiguration"
        ],
        "update": [
            "elasticfilesystem:DeleteFileSystemPolicy",
            "elasticfilesystem:DescribeBackupPolicy",
            "elasticfilesystem:DescribeFileSystemPolicy",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeLifecycleConfiguration",
            "elasticfilesystem:DeleteTags",
            "elasticfilesystem:ListTagsForResource",
            "elasticfilesystem:PutBackupPolicy",
            "elasticfilesystem:PutFileSystemPolicy",
            "elasticfilesystem:PutLifecycleConfiguration",
            "elasticfilesystem:TagResource",
            "elasticfilesystem:UntagResource",
            "elasticfilesystem:UpdateFileSystem"
        ],
        "delete": [
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DeleteFileSystem"
        ]
    },
    "AWS::EFS::MountTarget": {
        "create": [
            "elasticfilesystem:CreateMountTarget",
            "elasticfilesystem:DescribeMountTargets"
        ],
        "read": [
            "elasticfilesystem:DescribeMountTargets"
        ],
        "update": [
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:DescribeMountTargetSecurityGroups",
            "elasticfilesystem:ModifyMountTargetSecurityGroups"
        ],
        "delete": [
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:DeleteMountTarget"
        ]
    },
    "AWS::EKS::Addon": {
        "create": [
            "eks:CreateAddon",
            "eks:DescribeAddon",
            "eks:TagResource",
            "iam:PassRole"
        ],
        "read": [
            "eks:DescribeAddon"
        ],
        "update": [
            "iam:PassRole",
            "eks:UpdateAddon",
            "eks:DescribeAddon",
            "eks:DescribeUpdate",
            "eks:ListTagsForResource",
            "eks:TagResource",
            "eks:UntagResource"
        ],
        "delete": [
            "eks:DeleteAddon",
            "eks:DescribeAddon"
        ]
    },
    "AWS::EKS::FargateProfile": {
        "create": [
            "eks:CreateFargateProfile",
            "eks:DescribeFargateProfile",
            "iam:GetRole",
            "iam:PassRole",
            "iam:CreateServiceLinkedRole",
            "eks:TagResource"
        ],
        "read": [
            "eks:DescribeFargateProfile"
        ],
        "update": [
            "eks:DescribeFargateProfile",
            "eks:ListTagsForResource",
            "eks:TagResource",
            "eks:UntagResource"
        ],
        "delete": [
            "eks:DeleteFargateProfile",
            "eks:DescribeFargateProfile"
        ]
    },
    "AWS::EMR::Studio": {
        "create": [
            "elasticmapreduce:CreateStudio",
            "elasticmapreduce:DescribeStudio",
            "elasticmapreduce:AddTags",
            "sso:CreateManagedApplicationInstance",
            "sso:DeleteManagedApplicationInstance",
            "iam:PassRole"
        ],
        "read": [
            "elasticmapreduce:DescribeStudio",
            "sso:GetManagedApplicationInstance"
        ],
        "update": [
            "elasticmapreduce:UpdateStudio",
            "elasticmapreduce:DescribeStudio",
            "elasticmapreduce:AddTags",
            "elasticmapreduce:RemoveTags"
        ],
        "delete": [
            "elasticmapreduce:DeleteStudio",
            "elasticmapreduce:DescribeStudio",
            "sso:DeleteManagedApplicationInstance"
        ]
    },
    "AWS::EMR::StudioSessionMapping": {
        "create": [
            "elasticmapreduce:CreateStudioSessionMapping",
            "sso-directory:SearchUsers",
            "sso-directory:SearchGroups",
            "sso-directory:DescribeUser",
            "sso-directory:DescribeGroup",
            "sso:ListDirectoryAssociations",
            "sso:GetProfile",
            "sso:ListProfiles",
            "sso:AssociateProfile"
        ],
        "read": [
            "elasticmapreduce:GetStudioSessionMapping",
            "sso-directory:SearchUsers",
            "sso-directory:SearchGroups",
            "sso-directory:DescribeUser",
            "sso-directory:DescribeGroup",
            "sso:GetManagedApplicationInstance"
        ],
        "update": [
            "elasticmapreduce:GetStudioSessionMapping",
            "elasticmapreduce:UpdateStudioSessionMapping",
            "sso-directory:SearchUsers",
            "sso-directory:SearchGroups",
            "sso-directory:DescribeUser",
            "sso-directory:DescribeGroup",
            "sso:GetManagedApplicationInstance"
        ],
        "delete": [
            "elasticmapreduce:GetStudioSessionMapping",
            "elasticmapreduce:DeleteStudioSessionMapping",
            "sso-directory:SearchUsers",
            "sso-directory:SearchGroups",
            "sso-directory:DescribeUser",
            "sso-directory:DescribeGroup",
            "sso:ListDirectoryAssociations",
            "sso:GetProfile",
            "sso:ListProfiles",
            "sso:DisassociateProfile"
        ]
    },
    "AWS::EMRContainers::VirtualCluster": {
        "create": [
            "emr-containers:CreateVirtualCluster",
            "emr-containers:TagResource",
            "iam:CreateServiceLinkedRole"
        ],
        "read": [
            "emr-containers:DescribeVirtualCluster"
        ],
        "update": [
            "emr-containers:DescribeVirtualCluster",
            "emr-containers:ListTagsForResource",
            "emr-containers:TagResource",
            "emr-containers:UntagResource"
        ],
        "delete": [
            "emr-containers:DeleteVirtualCluster"
        ]
    },
    "AWS::ElastiCache::GlobalReplicationGroup": {
        "create": [
            "elasticache:CreateGlobalReplicationGroup",
            "elasticache:DescribeGlobalReplicationGroups"
        ],
        "read": [
            "elasticache:DescribeGlobalReplicationGroups"
        ],
        "update": [
            "elasticache:ModifyGlobalReplicationGroup",
            "elasticache:FailoverGlobalReplicationGroup",
            "elasticache:DescribeGlobalReplicationGroups",
            "elasticache:IncreaseNodeGroupsInGlobalReplicationGroup",
            "elasticache:DecreaseNodeGroupsInGlobalReplicationGroup",
            "elasticache:DisassociateGlobalReplicationGroup",
            "elasticache:RebalanceSlotsInGlobalReplicationGroup"
        ],
        "delete": [
            "elasticache:DeleteGlobalReplicationGroup",
            "elasticache:DisassociateGlobalReplicationGroup",
            "elasticache:DescribeGlobalReplicationGroups"
        ]
    },
    "AWS::ElastiCache::User": {
        "create": [
            "elasticache:CreateUser",
            "elasticache:DescribeUsers"
        ],
        "read": [
            "elasticache:DescribeUsers"
        ],
        "update": [
            "elasticache:ModifyUser",
            "elasticache:DescribeUsers"
        ],
        "delete": [
            "elasticache:DeleteUser",
            "elasticache:DescribeUsers"
        ]
    },
    "AWS::ElastiCache::UserGroup": {
        "create": [
            "elasticache:CreateUserGroup",
            "elasticache:DescribeUserGroups"
        ],
        "read": [
            "elasticache:DescribeUserGroups"
        ],
        "update": [
            "elasticache:ModifyUserGroup",
            "elasticache:DescribeUserGroups"
        ],
        "delete": [
            "elasticache:ModifyReplicationGroup",
            "elasticache:DeleteUserGroup",
            "elasticache:DescribeUserGroups"
        ]
    },
    "AWS::ElasticLoadBalancingV2::Listener": {
        "create": [
            "elasticloadbalancing:CreateListener",
            "elasticloadbalancing:DescribeListeners"
        ],
        "read": [
            "elasticloadbalancing:DescribeListeners"
        ],
        "update": [
            "elasticloadbalancing:ModifyListener"
        ],
        "delete": [
            "elasticloadbalancing:DeleteListener"
        ]
    },
    "AWS::ElasticLoadBalancingV2::ListenerRule": {
        "create": [
            "elasticloadbalancing:CreateRule",
            "elasticloadbalancing:DescribeRules"
        ],
        "read": [
            "elasticloadbalancing:DescribeRules"
        ],
        "update": [
            "elasticloadbalancing:ModifyRule",
            "elasticloadbalancing:SetRulePriorities",
            "elasticloadbalancing:DescribeRules"
        ],
        "delete": [
            "elasticloadbalancing:DeleteRule"
        ]
    },
    "AWS::EventSchemas::RegistryPolicy": {
        "create": [
            "schemas:PutResourcePolicy",
            "schemas:GetResourcePolicy",
            "schemas:DescribeRegistry"
        ],
        "read": [
            "schemas:GetResourcePolicy"
        ],
        "update": [
            "schemas:PutResourcePolicy",
            "schemas:GetResourcePolicy"
        ],
        "delete": [
            "schemas:DeleteResourcePolicy",
            "schemas:GetResourcePolicy"
        ]
    },
    "AWS::Events::ApiDestination": {
        "create": [
            "events:CreateApiDestination",
            "events:DescribeApiDestination"
        ],
        "read": [
            "events:DescribeApiDestination"
        ],
        "update": [
            "events:UpdateApiDestination",
            "events:DescribeApiDestination"
        ],
        "delete": [
            "events:DeleteApiDestination",
            "events:DescribeApiDestination"
        ]
    },
    "AWS::Events::Archive": {
        "create": [
            "events:DescribeArchive",
            "events:CreateArchive"
        ],
        "read": [
            "events:DescribeArchive"
        ],
        "update": [
            "events:DescribeArchive",
            "events:UpdateArchive"
        ],
        "delete": [
            "events:DescribeArchive",
            "events:DeleteArchive"
        ]
    },
    "AWS::Events::Connection": {
        "create": [
            "events:CreateConnection",
            "secretsmanager:CreateSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:PutSecretValue",
            "iam:CreateServiceLinkedRole"
        ],
        "read": [
            "events:DescribeConnection"
        ],
        "update": [
            "events:UpdateConnection",
            "events:DescribeConnection",
            "secretsmanager:CreateSecret",
            "secretsmanager:UpdateSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:PutSecretValue"
        ],
        "delete": [
            "events:DeleteConnection"
        ]
    },
    "AWS::FIS::ExperimentTemplate": {
        "create": [
            "fis:CreateExperimentTemplate"
        ],
        "read": [
            "fis:GetExperimentTemplate"
        ],
        "update": [
            "fis:UpdateExperimentTemplate"
        ],
        "delete": [
            "fis:DeleteExperimentTemplate"
        ]
    },
    "AWS::FMS::NotificationChannel": {
        "create": [
            "fms:PutNotificationChannel",
            "iam:PassRole"
        ],
        "read": [
            "fms:GetNotificationChannel"
        ],
        "update": [
            "fms:PutNotificationChannel",
            "iam:PassRole"
        ],
        "delete": [
            "fms:DeleteNotificationChannel"
        ]
    },
    "AWS::FMS::Policy": {
        "create": [
            "fms:PutPolicy",
            "fms:TagResource",
            "waf-regional:ListRuleGroups",
            "wafv2:CheckCapacity",
            "wafv2:ListRuleGroups",
            "wafv2:ListAvailableManagedRuleGroups",
            "network-firewall:DescribeRuleGroup",
            "route53resolver:ListFirewallRuleGroups"
        ],
        "read": [
            "fms:GetPolicy",
            "fms:ListTagsForResource"
        ],
        "update": [
            "fms:PutPolicy",
            "fms:GetPolicy",
            "fms:TagResource",
            "fms:UntagResource",
            "fms:ListTagsForResource",
            "waf-regional:ListRuleGroups",
            "wafv2:CheckCapacity",
            "wafv2:ListRuleGroups",
            "wafv2:ListAvailableManagedRuleGroups",
            "network-firewall:DescribeRuleGroup",
            "route53resolver:ListFirewallRuleGroups"
        ],
        "delete": [
            "fms:DeletePolicy"
        ]
    },
    "AWS::FinSpace::Environment": {
        "create": [
            "finspace:CreateEnvironment",
            "finspace:GetEnvironment",
            "finspace:ListEnvironments",
            "sts:AssumeRole"
        ],
        "read": [
            "finspace:GetEnvironment"
        ],
        "update": [
            "finspace:UpdateEnvironment"
        ],
        "delete": [
            "finspace:DeleteEnvironment",
            "finspace:GetEnvironment"
        ]
    },
    "AWS::FraudDetector::Detector": {
        "create": [
            "frauddetector:PutDetector",
            "frauddetector:CreateDetectorVersion",
            "frauddetector:UpdateDetectorVersionStatus",
            "frauddetector:CreateRule",
            "frauddetector:CreateVariable",
            "frauddetector:PutLabel",
            "frauddetector:PutOutcome",
            "frauddetector:PutEntityType",
            "frauddetector:PutEventType",
            "frauddetector:DescribeDetector",
            "frauddetector:GetDetectors",
            "frauddetector:GetDetectorVersion",
            "frauddetector:GetRules",
            "frauddetector:GetVariables",
            "frauddetector:GetEventTypes",
            "frauddetector:GetExternalModels",
            "frauddetector:GetModelVersion",
            "frauddetector:GetLabels",
            "frauddetector:GetOutcomes",
            "frauddetector:GetEntityTypes",
            "frauddetector:ListTagsForResource"
        ],
        "read": [
            "frauddetector:GetDetectors",
            "frauddetector:GetDetectorVersion",
            "frauddetector:DescribeDetector",
            "frauddetector:GetRules",
            "frauddetector:GetVariables",
            "frauddetector:GetEventTypes",
            "frauddetector:GetExternalModels",
            "frauddetector:GetModelVersion",
            "frauddetector:GetLabels",
            "frauddetector:GetOutcomes",
            "frauddetector:GetEntityTypes",
            "frauddetector:ListTagsForResource"
        ],
        "update": [
            "frauddetector:GetDetectors",
            "frauddetector:GetDetectorVersion",
            "frauddetector:PutDetector",
            "frauddetector:UpdateDetectorVersion",
            "frauddetector:UpdateDetectorVersionStatus",
            "frauddetector:UpdateDetectorVersionMetadata",
            "frauddetector:UpdateRuleVersion",
            "frauddetector:UpdateRuleMetadata",
            "frauddetector:CreateRule",
            "frauddetector:CreateVariable",
            "frauddetector:UpdateVariable",
            "frauddetector:GetVariables",
            "frauddetector:PutLabel",
            "frauddetector:PutOutcome",
            "frauddetector:PutEntityType",
            "frauddetector:PutEventType",
            "frauddetector:GetRules",
            "frauddetector:GetEventTypes",
            "frauddetector:GetLabels",
            "frauddetector:GetOutcomes",
            "frauddetector:GetEntityTypes",
            "frauddetector:GetExternalModels",
            "frauddetector:GetModelVersion",
            "frauddetector:DeleteEventType",
            "frauddetector:DeleteVariable",
            "frauddetector:DeleteLabel",
            "frauddetector:DeleteEntityType",
            "frauddetector:ListTagsForResource",
            "frauddetector:TagResource",
            "frauddetector:UntagResource"
        ],
        "delete": [
            "frauddetector:GetDetectors",
            "frauddetector:GetDetectorVersion",
            "frauddetector:DescribeDetector",
            "frauddetector:GetRules",
            "frauddetector:GetVariables",
            "frauddetector:GetEventTypes",
            "frauddetector:GetLabels",
            "frauddetector:GetOutcomes",
            "frauddetector:GetEntityTypes",
            "frauddetector:DeleteDetector",
            "frauddetector:DeleteDetectorVersion",
            "frauddetector:DeleteRule",
            "frauddetector:DeleteEventType",
            "frauddetector:DeleteVariable",
            "frauddetector:DeleteLabel",
            "frauddetector:DeleteOutcome",
            "frauddetector:DeleteEntityType",
            "frauddetector:ListTagsForResource"
        ]
    },
    "AWS::FraudDetector::EntityType": {
        "create": [
            "frauddetector:GetEntityTypes",
            "frauddetector:PutEntityType",
            "frauddetector:ListTagsForResource"
        ],
        "read": [
            "frauddetector:GetEntityTypes",
            "frauddetector:ListTagsForResource"
        ],
        "update": [
            "frauddetector:GetEntityTypes",
            "frauddetector:PutEntityType",
            "frauddetector:ListTagsForResource",
            "frauddetector:TagResource",
            "frauddetector:UntagResource"
        ],
        "delete": [
            "frauddetector:GetEntityTypes",
            "frauddetector:DeleteEntityType"
        ]
    },
    "AWS::FraudDetector::EventType": {
        "create": [
            "frauddetector:CreateVariable",
            "frauddetector:GetVariables",
            "frauddetector:PutLabel",
            "frauddetector:PutEntityType",
            "frauddetector:PutEventType",
            "frauddetector:GetEventTypes",
            "frauddetector:GetLabels",
            "frauddetector:GetEntityTypes",
            "frauddetector:ListTagsForResource"
        ],
        "read": [
            "frauddetector:GetVariables",
            "frauddetector:GetEventTypes",
            "frauddetector:GetLabels",
            "frauddetector:GetEntityTypes",
            "frauddetector:ListTagsForResource"
        ],
        "update": [
            "frauddetector:CreateVariable",
            "frauddetector:UpdateVariable",
            "frauddetector:GetVariables",
            "frauddetector:PutLabel",
            "frauddetector:PutEntityType",
            "frauddetector:PutEventType",
            "frauddetector:GetEventTypes",
            "frauddetector:GetLabels",
            "frauddetector:GetEntityTypes",
            "frauddetector:DeleteEventType",
            "frauddetector:DeleteVariable",
            "frauddetector:DeleteLabel",
            "frauddetector:DeleteEntityType",
            "frauddetector:ListTagsForResource",
            "frauddetector:TagResource",
            "frauddetector:UntagResource"
        ],
        "delete": [
            "frauddetector:GetVariables",
            "frauddetector:GetEventTypes",
            "frauddetector:GetLabels",
            "frauddetector:GetEntityTypes",
            "frauddetector:DeleteEventType",
            "frauddetector:DeleteVariable",
            "frauddetector:DeleteLabel",
            "frauddetector:DeleteEntityType",
            "frauddetector:ListTagsForResource"
        ]
    },
    "AWS::FraudDetector::Label": {
        "create": [
            "frauddetector:GetLabels",
            "frauddetector:PutLabel",
            "frauddetector:ListTagsForResource"
        ],
        "read": [
            "frauddetector:GetLabels",
            "frauddetector:ListTagsForResource"
        ],
        "update": [
            "frauddetector:GetLabels",
            "frauddetector:PutLabel",
            "frauddetector:ListTagsForResource",
            "frauddetector:TagResource",
            "frauddetector:UntagResource"
        ],
        "delete": [
            "frauddetector:GetLabels",
            "frauddetector:DeleteLabel"
        ]
    },
    "AWS::FraudDetector::Outcome": {
        "create": [
            "frauddetector:GetOutcomes",
            "frauddetector:PutOutcome",
            "frauddetector:ListTagsForResource"
        ],
        "read": [
            "frauddetector:GetOutcomes",
            "frauddetector:ListTagsForResource"
        ],
        "update": [
            "frauddetector:GetOutcomes",
            "frauddetector:PutOutcome",
            "frauddetector:ListTagsForResource",
            "frauddetector:TagResource",
            "frauddetector:UntagResource"
        ],
        "delete": [
            "frauddetector:GetOutcomes",
            "frauddetector:DeleteOutcome"
        ]
    },
    "AWS::FraudDetector::Variable": {
        "create": [
            "frauddetector:GetVariables",
            "frauddetector:CreateVariable",
            "frauddetector:ListTagsForResource"
        ],
        "read": [
            "frauddetector:GetVariables",
            "frauddetector:ListTagsForResource"
        ],
        "update": [
            "frauddetector:GetVariables",
            "frauddetector:UpdateVariable",
            "frauddetector:ListTagsForResource",
            "frauddetector:TagResource",
            "frauddetector:UntagResource"
        ],
        "delete": [
            "frauddetector:GetVariables",
            "frauddetector:DeleteVariable"
        ]
    },
    "AWS::GameLift::Alias": {
        "create": [
            "gamelift:CreateAlias"
        ],
        "read": [
            "gamelift:DescribeAlias"
        ],
        "update": [
            "gamelift:UpdateAlias"
        ],
        "delete": [
            "gamelift:DeleteAlias"
        ]
    },
    "AWS::GameLift::Fleet": {
        "create": [
            "gamelift:CreateFleet",
            "gamelift:DescribeFleetAttributes",
            "gamelift:DescribeFleetLocationAttributes"
        ],
        "read": [
            "gamelift:DescribeFleetAttributes",
            "gamelift:DescribeFleetLocationAttributes",
            "gamelift:DescribeFleetCapacity",
            "gamelift:DescribeFleetPortSettings",
            "gamelift:DescribeFleetUtilization",
            "gamelift:DescribeRuntimeConfiguration",
            "gamelift:DescribeEC2InstanceLimits",
            "gamelift:DescribeFleetEvents"
        ],
        "update": [
            "gamelift:UpdateFleetAttributes",
            "gamelift:CreateFleetLocations",
            "gamelift:DeleteFleetLocations",
            "gamelift:UpdateFleetCapacity",
            "gamelift:UpdateFleetPortSettings",
            "gamelift:UpdateRuntimeConfiguration",
            "gamelift:DescribeFleetLocationCapacity",
            "gamelift:DescribeFleetPortSettings",
            "gamelift:DescribeFleetLocationAttributes"
        ],
        "delete": [
            "gamelift:DeleteFleet",
            "gamelift:DescribeFleetLocationCapacity"
        ]
    },
    "AWS::GameLift::GameServerGroup": {
        "create": [
            "gamelift:CreateGameServerGroup"
        ],
        "read": [
            "gamelift:DescribeGameServerGroup"
        ],
        "update": [
            "gamelift:UpdateGameServerGroup"
        ],
        "delete": [
            "gamelift:DeleteGameServerGroup"
        ]
    },
    "AWS::GlobalAccelerator::Accelerator": {
        "create": [
            "globalaccelerator:CreateAccelerator",
            "globalaccelerator:DescribeAccelerator",
            "globalaccelerator:TagResource"
        ],
        "read": [
            "globalaccelerator:DescribeAccelerator"
        ],
        "update": [
            "globalaccelerator:UpdateAccelerator",
            "globalaccelerator:TagResource",
            "globalaccelerator:UntagResource"
        ],
        "delete": [
            "globalaccelerator:UpdateAccelerator",
            "globalaccelerator:DeleteAccelerator"
        ]
    },
    "AWS::GlobalAccelerator::EndpointGroup": {
        "create": [
            "globalaccelerator:CreateEndpointGroup",
            "globalaccelerator:DescribeEndpointGroup",
            "globalaccelerator:DescribeListener",
            "globalaccelerator:ListAccelerators",
            "globalaccelerator:ListListeners"
        ],
        "read": [
            "globalaccelerator:DescribeEndpointGroup"
        ],
        "update": [
            "globalaccelerator:UpdateEndpointGroup",
            "globalaccelerator:DescribeEndpointGroup",
            "globalaccelerator:DescribeListener"
        ],
        "delete": [
            "globalaccelerator:DeleteEndpointGroup",
            "globalaccelerator:DescribeEndpointGroup",
            "globalaccelerator:DescribeAccelerator"
        ]
    },
    "AWS::GlobalAccelerator::Listener": {
        "create": [
            "globalaccelerator:CreateListener",
            "globalaccelerator:DescribeListener",
            "globalaccelerator:DescribeAccelerator"
        ],
        "read": [
            "globalaccelerator:DescribeListener"
        ],
        "update": [
            "globalaccelerator:UpdateListener",
            "globalaccelerator:DescribeListener",
            "globalaccelerator:DescribeAccelerator"
        ],
        "delete": [
            "globalaccelerator:DescribeListener",
            "globalaccelerator:DeleteListener"
        ]
    },
    "AWS::Glue::Registry": {
        "create": [
            "glue:CreateRegistry",
            "glue:GetRegistry"
        ],
        "read": [
            "glue:GetRegistry"
        ],
        "update": [
            "glue:UpdateRegistry",
            "glue:GetRegistry"
        ],
        "delete": [
            "glue:DeleteRegistry"
        ]
    },
    "AWS::Glue::Schema": {
        "create": [
            "glue:CreateSchema"
        ],
        "read": [
            "glue:GetSchemaVersion",
            "glue:GetSchema"
        ],
        "update": [
            "glue:UpdateSchema",
            "glue:GetSchemaVersion",
            "glue:GetSchema"
        ],
        "delete": [
            "glue:DeleteSchema",
            "glue:GetSchema"
        ]
    },
    "AWS::GreengrassV2::ComponentVersion": {
        "create": [
            "greengrass:CreateComponentVersion",
            "greengrass:DescribeComponent",
            "lambda:GetFunction",
            "s3:GetObject"
        ],
        "read": [
            "greengrass:DescribeComponent"
        ],
        "update": [
            "greengrass:TagResource",
            "greengrass:UntagResource"
        ],
        "delete": [
            "greengrass:DeleteComponent"
        ]
    },
    "AWS::GroundStation::Config": {
        "create": [
            "groundstation:CreateConfig",
            "groundstation:TagResource"
        ],
        "read": [
            "groundstation:DescribeConfig",
            "groundstation:ListTagsForResource"
        ],
        "update": [
            "groundstation:UpdateConfig",
            "groundstation:ListTagsForResource",
            "groundstation:TagResource",
            "groundstation:UntagResource"
        ],
        "delete": [
            "groundstation:DeleteConfig"
        ]
    },
    "AWS::GroundStation::MissionProfile": {
        "create": [
            "groundstation:CreateMissionProfile",
            "groundstation:GetMissionProfile",
            "groundstation:TagResource"
        ],
        "read": [
            "groundstation:GetMissionProfile",
            "groundstation:ListTagsForResource"
        ],
        "update": [
            "groundstation:UpdateMissionProfile",
            "groundstation:GetMissionProfile",
            "groundstation:ListTagsForResource",
            "groundstation:TagResource",
            "groundstation:UntagResource"
        ],
        "delete": [
            "groundstation:DeleteMissionProfile",
            "groundstation:GetMissionProfile"
        ]
    },
    "AWS::HealthLake::FHIRDatastore": {
        "create": [
            "healthlake:CreateFHIRDatastore",
            "healthlake:DescribeFHIRDatastore",
            "iam:PassRole",
            "kms:DescribeKey",
            "kms:CreateGrant",
            "kms:GenerateDataKey",
            "kms:Decrypt",
            "iam:GetRole",
            "iam:CreateServiceLinkedRole"
        ],
        "read": [
            "healthlake:DescribeFHIRDatastore",
            "healthlake:ListTagsForResource"
        ],
        "update": [
            "healthlake:TagResource",
            "healthlake:UntagResource",
            "healthlake:ListTagsForResource",
            "iam:PassRole",
            "iam:GetRole",
            "iam:CreateServiceLinkedRole"
        ],
        "delete": [
            "healthlake:DeleteFHIRDatastore",
            "healthlake:DescribeFHIRDatastore",
            "iam:PassRole",
            "iam:GetRole",
            "iam:CreateServiceLinkedRole"
        ]
    },
    "AWS::IAM::OIDCProvider": {
        "create": [
            "iam:CreateOpenIDConnectProvider",
            "iam:GetOpenIDConnectProvider"
        ],
        "read": [
            "iam:GetOpenIDConnectProvider"
        ],
        "update": [
            "iam:UpdateOpenIDConnectProviderThumbprint",
            "iam:RemoveClientIDFromOpenIDConnectProvider",
            "iam:AddClientIDToOpenIDConnectProvider",
            "iam:GetOpenIDConnectProvider",
            "iam:TagOpenIDConnectProvider",
            "iam:UntagOpenIDConnectProvider"
        ],
        "delete": [
            "iam:DeleteOpenIDConnectProvider"
        ]
    },
    "AWS::IAM::SAMLProvider": {
        "create": [
            "iam:CreateSAMLProvider",
            "iam:GetSAMLProvider"
        ],
        "read": [
            "iam:GetSAMLProvider"
        ],
        "update": [
            "iam:UpdateSAMLProvider",
            "iam:GetSAMLProvider",
            "iam:TagSAMLProvider",
            "iam:UntagSAMLProvider"
        ],
        "delete": [
            "iam:DeleteSAMLProvider"
        ]
    },
    "AWS::IAM::ServerCertificate": {
        "create": [
            "iam:UploadServerCertificate",
            "iam:GetServerCertificate"
        ],
        "read": [
            "iam:GetServerCertificate"
        ],
        "update": [
            "iam:TagServerCertificate",
            "iam:UntagServerCertificate"
        ],
        "delete": [
            "iam:DeleteServerCertificate"
        ]
    },
    "AWS::IAM::VirtualMFADevice": {
        "create": [
            "iam:CreateVirtualMFADevice",
            "iam:EnableMFADevice",
            "iam:ListVirtualMFADevices"
        ],
        "read": [
            "iam:ListVirtualMFADevices"
        ],
        "update": [
            "iam:TagMFADevice",
            "iam:UntagMFADevice"
        ],
        "delete": [
            "iam:DeleteVirtualMFADevice",
            "iam:DeactivateMFADevice"
        ]
    },
    "AWS::IVS::Channel": {
        "create": [
            "ivs:CreateChannel"
        ],
        "read": [
            "ivs:GetChannel"
        ],
        "update": [
            "ivs:UpdateChannel",
            "ivs:TagResource",
            "ivs:UnTagResource",
            "ivs:ListTagsForResource"
        ],
        "delete": [
            "ivs:DeleteChannel"
        ]
    },
    "AWS::IVS::PlaybackKeyPair": {
        "create": [
            "ivs:ImportPlaybackKeyPair"
        ],
        "read": [
            "ivs:GetPlaybackKeyPair"
        ],
        "update": [
            "ivs:ListTagsForResource",
            "ivs:UntagResource",
            "ivs:TagResource"
        ],
        "delete": [
            "ivs:DeletePlaybackKeyPair"
        ]
    },
    "AWS::IVS::RecordingConfiguration": {
        "create": [
            "ivs:CreateRecordingConfiguration",
            "iam:CreateServiceLinkedRole",
            "iam:PutRolePolicy",
            "iam:AttachRolePolicy",
            "s3:ListBucket",
            "s3:GetBucketLocation",
            "cloudformation:ListExports"
        ],
        "read": [
            "ivs:GetRecordingConfiguration"
        ],
        "update": [
            "sts:AssumeRole",
            "iam:CreateServiceLinkedRole",
            "ivs:TagResource",
            "ivs:UntagResource",
            "ivs:ListTagsForResource"
        ],
        "delete": [
            "ivs:DeleteRecordingConfiguration",
            "iam:CreateServiceLinkedRole"
        ]
    },
    "AWS::IVS::StreamKey": {
        "create": [
            "ivs:CreateStreamKey"
        ],
        "read": [
            "ivs:GetStreamKey"
        ],
        "update": [
            "ivs:TagResource",
            "ivs:UntagResource",
            "ivs:ListTagsForResource"
        ],
        "delete": [
            "ivs:DeleteStreamKey"
        ]
    },
    "AWS::ImageBuilder::DistributionConfiguration": {
        "create": [
            "iam:GetRole",
            "iam:CreateServiceLinkedRole",
            "ec2:DescribeLaunchTemplates",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:ModifyLaunchTemplate",
            "imagebuilder:TagResource",
            "imagebuilder:GetDistributionConfiguration",
            "imagebuilder:CreateDistributionConfiguration"
        ],
        "read": [
            "imagebuilder:GetDistributionConfiguration"
        ],
        "update": [
            "imagebuilder:GetDistributionConfiguration",
            "imagebuilder:UpdateDistributionConfiguration"
        ],
        "delete": [
            "imagebuilder:GetDistributionConfiguration",
            "imagebuilder:UnTagResource",
            "imagebuilder:DeleteDistributionConfiguration"
        ]
    },
    "AWS::ImageBuilder::Image": {
        "create": [
            "iam:GetRole",
            "iam:CreateServiceLinkedRole",
            "imagebuilder:GetImageRecipe",
            "imagebuilder:GetInfrastructureConfiguration",
            "imagebuilder:GetDistributionConfiguration",
            "imagebuilder:GetImage",
            "imagebuilder:CreateImage",
            "imagebuilder:TagResource"
        ],
        "read": [
            "imagebuilder:GetImage"
        ],
        "update": [],
        "delete": [
            "imagebuilder:GetImage",
            "imagebuilder:DeleteImage",
            "imagebuilder:UnTagResource"
        ]
    },
    "AWS::ImageBuilder::ImagePipeline": {
        "create": [
            "iam:GetRole",
            "iam:CreateServiceLinkedRole",
            "imagebuilder:TagResource",
            "imagebuilder:GetImagePipeline",
            "imagebuilder:GetImageRecipe",
            "imagebuilder:GetInfrastructureConfiguration",
            "imagebuilder:GetDistributionConfiguration",
            "imagebuilder:CreateImagePipeline"
        ],
        "read": [
            "imagebuilder:GetImagePipeline"
        ],
        "update": [
            "imagebuilder:GetImagePipeline",
            "imagebuilder:UpdateImagePipeline"
        ],
        "delete": [
            "imagebuilder:UnTagResource",
            "imagebuilder:GetImagePipeline",
            "imagebuilder:DeleteImagePipeline"
        ]
    },
    "AWS::ImageBuilder::InfrastructureConfiguration": {
        "create": [
            "iam:PassRole",
            "iam:GetRole",
            "iam:GetInstanceProfile",
            "iam:CreateServiceLinkedRole",
            "sns:Publish",
            "imagebuilder:TagResource",
            "imagebuilder:GetInfrastructureConfiguration",
            "imagebuilder:CreateInfrastructureConfiguration"
        ],
        "read": [
            "imagebuilder:GetInfrastructureConfiguration"
        ],
        "update": [
            "imagebuilder:GetInfrastructureConfiguration",
            "imagebuilder:UpdateInfrastructureConfiguration"
        ],
        "delete": [
            "imagebuilder:UnTagResource",
            "imagebuilder:GetInfrastructureConfiguration",
            "imagebuilder:DeleteInfrastructureConfiguration"
        ]
    },
    "AWS::IoT::AccountAuditConfiguration": {
        "create": [
            "iot:UpdateAccountAuditConfiguration",
            "iot:DescribeAccountAuditConfiguration",
            "iam:PassRole"
        ],
        "read": [
            "iot:DescribeAccountAuditConfiguration"
        ],
        "update": [
            "iot:UpdateAccountAuditConfiguration",
            "iot:DescribeAccountAuditConfiguration",
            "iam:PassRole"
        ],
        "delete": [
            "iot:DescribeAccountAuditConfiguration",
            "iot:DeleteAccountAuditConfiguration"
        ]
    },
    "AWS::IoT::Authorizer": {
        "create": [
            "iot:CreateAuthorizer"
        ],
        "read": [
            "iot:DescribeAuthorizer"
        ],
        "update": [
            "iot:UpdateAuthorizer"
        ],
        "delete": [
            "iot:DeleteAuthorizer"
        ]
    },
    "AWS::IoT::Certificate": {
        "create": [
            "iot:CreateCertificateFromCsr",
            "iot:RegisterCertificate",
            "iot:RegisterCertificateWithoutCA"
        ],
        "read": [
            "iot:DescribeCertificate"
        ],
        "update": [
            "iot:UpdateCertificate"
        ],
        "delete": [
            "iot:DeleteCertificate"
        ]
    },
    "AWS::IoT::CustomMetric": {
        "create": [
            "iot:CreateCustomMetric"
        ],
        "read": [
            "iot:DescribeCustomMetric",
            "iot:ListTagsForResource"
        ],
        "update": [
            "iot:UpdateCustomMetric",
            "iot:ListTagsForResource",
            "iot:UntagResource",
            "iot:TagResource"
        ],
        "delete": [
            "iot:DescribeCustomMetric",
            "iot:DeleteCustomMetric"
        ]
    },
    "AWS::IoT::Dimension": {
        "create": [
            "iot:CreateDimension"
        ],
        "read": [
            "iot:DescribeDimension",
            "iot:ListTagsForResource"
        ],
        "update": [
            "iot:UpdateDimension",
            "iot:ListTagsForResource",
            "iot:UntagResource",
            "iot:TagResource"
        ],
        "delete": [
            "iot:DescribeDimension",
            "iot:DeleteDimension"
        ]
    },
    "AWS::IoT::DomainConfiguration": {
        "create": [
            "iot:CreateDomainConfiguration",
            "iot:UpdateDomainConfiguration",
            "iot:DescribeDomainConfiguration"
        ],
        "read": [
            "iot:DescribeDomainConfiguration"
        ],
        "update": [
            "iot:UpdateDomainConfiguration",
            "iot:DescribeDomainConfiguration"
        ],
        "delete": [
            "iot:DeleteDomainConfiguration",
            "iot:UpdateDomainConfiguration"
        ]
    },
    "AWS::IoT::FleetMetric": {
        "create": [
            "iot:CreateFleetMetric"
        ],
        "read": [
            "iot:DescribeFleetMetric",
            "iot:ListTagsForResource"
        ],
        "update": [
            "iot:UpdateFleetMetric",
            "iot:ListTagsForResource",
            "iot:UntagResource",
            "iot:TagResource"
        ],
        "delete": [
            "iot:DeleteFleetMetric"
        ]
    },
    "AWS::IoT::MitigationAction": {
        "create": [
            "iot:CreateMitigationAction",
            "iam:PassRole"
        ],
        "read": [
            "iot:DescribeMitigationAction",
            "iot:ListTagsForResource"
        ],
        "update": [
            "iot:UpdateMitigationAction",
            "iot:ListTagsForResource",
            "iot:UntagResource",
            "iot:TagResource",
            "iam:PassRole"
        ],
        "delete": [
            "iot:DescribeMitigationAction",
            "iot:DeleteMitigationAction"
        ]
    },
    "AWS::IoT::ProvisioningTemplate": {
        "create": [
            "iam:GetRole",
            "iam:PassRole",
            "iot:CreateProvisioningTemplate"
        ],
        "read": [
            "iot:DescribeProvisioningTemplate"
        ],
        "update": [
            "iam:GetRole",
            "iam:PassRole",
            "iot:UpdateProvisioningTemplate",
            "iot:CreateProvisioningTemplateVersion",
            "iot:ListProvisioningTemplateVersions",
            "iot:DeleteProvisioningTemplateVersion"
        ],
        "delete": [
            "iot:DeleteProvisioningTemplate",
            "iot:DescribeProvisioningTemplate"
        ]
    },
    "AWS::IoT::ScheduledAudit": {
        "create": [
            "iot:CreateScheduledAudit"
        ],
        "read": [
            "iot:DescribeScheduledAudit",
            "iot:ListTagsForResource"
        ],
        "update": [
            "iot:UpdateScheduledAudit",
            "iot:ListTagsForResource",
            "iot:UntagResource",
            "iot:TagResource"
        ],
        "delete": [
            "iot:DescribeScheduledAudit",
            "iot:DeleteScheduledAudit"
        ]
    },
    "AWS::IoT::SecurityProfile": {
        "create": [
            "iot:CreateSecurityProfile",
            "iot:AttachSecurityProfile",
            "iam:PassRole"
        ],
        "read": [
            "iot:DescribeSecurityProfile",
            "iot:ListTagsForResource",
            "iot:ListTargetsForSecurityProfile"
        ],
        "update": [
            "iot:UpdateSecurityProfile",
            "iot:ListTargetsForSecurityProfile",
            "iot:AttachSecurityProfile",
            "iot:DetachSecurityProfile",
            "iot:ListTagsForResource",
            "iot:UntagResource",
            "iot:TagResource",
            "iam:PassRole"
        ],
        "delete": [
            "iot:DescribeSecurityProfile",
            "iot:DeleteSecurityProfile"
        ]
    },
    "AWS::IoT::TopicRule": {
        "create": [
            "iam:PassRole",
            "iot:CreateTopicRule",
            "iot:GetTopicRule"
        ],
        "read": [
            "iot:GetTopicRule",
            "iot:ListTagsForResource"
        ],
        "update": [
            "iot:ReplaceTopicRule",
            "iot:ListTagsForResource",
            "iot:TagResource",
            "iot:UntagResource"
        ],
        "delete": [
            "iot:GetTopicRule",
            "iot:DeleteTopicRule"
        ]
    },
    "AWS::IoT::TopicRuleDestination": {
        "create": [
            "iot:CreateTopicRuleDestination",
            "iam:PassRole"
        ],
        "read": [
            "iot:GetTopicRuleDestination"
        ],
        "update": [
            "iot:UpdateTopicRuleDestination"
        ],
        "delete": [
            "iot:DeleteTopicRuleDestination"
        ]
    },
    "AWS::IoTCoreDeviceAdvisor::SuiteDefinition": {
        "create": [
            "iotdeviceadvisor:CreateSuiteDefinition",
            "iam:PassRole"
        ],
        "read": [
            "iotdeviceadvisor:GetSuiteDefinition"
        ],
        "update": [
            "iotdeviceadvisor:UpdateSuiteDefinition",
            "iotdeviceadvisor:GetSuiteDefinition",
            "iotdeviceadvisor:UntagResource",
            "iotdeviceadvisor:TagResource"
        ],
        "delete": [
            "iotdeviceadvisor:DeleteSuiteDefinition"
        ]
    },
    "AWS::IoTEvents::DetectorModel": {
        "create": [
            "iotevents:CreateDetectorModel",
            "iotevents:UpdateInputRouting",
            "iotevents:DescribeDetectorModel",
            "iotevents:ListTagsForResource",
            "iotevents:TagResource",
            "iam:PassRole"
        ],
        "read": [
            "iotevents:DescribeDetectorModel",
            "iotevents:ListTagsForResource"
        ],
        "update": [
            "iotevents:UpdateDetectorModel",
            "iotevents:UpdateInputRouting",
            "iotevents:DescribeDetectorModel",
            "iotevents:ListTagsForResource",
            "iotevents:UntagResource",
            "iotevents:TagResource",
            "iam:PassRole"
        ],
        "delete": [
            "iotevents:DeleteDetectorModel",
            "iotevents:DescribeDetectorModel"
        ]
    },
    "AWS::IoTEvents::Input": {
        "create": [
            "iotevents:CreateInput",
            "iotevents:TagResource",
            "iotevents:DescribeInput",
            "iotevents:ListTagsForResource"
        ],
        "read": [
            "iotevents:DescribeInput",
            "iotevents:ListTagsForResource"
        ],
        "update": [
            "iotevents:UpdateInput",
            "iotevents:DescribeInput",
            "iotevents:ListTagsForResource",
            "iotevents:UntagResource",
            "iotevents:TagResource"
        ],
        "delete": [
            "iotevents:DeleteInput",
            "iotevents:DescribeInput"
        ]
    },
    "AWS::IoTFleetHub::Application": {
        "create": [
            "iotfleethub:CreateApplication",
            "iotfleethub:TagResource",
            "iam:PassRole",
            "sso:CreateManagedApplicationInstance",
            "sso:DescribeRegisteredRegions"
        ],
        "read": [
            "iotfleethub:DescribeApplication"
        ],
        "update": [
            "iotfleethub:UpdateApplication",
            "iotfleethub:DescribeApplication",
            "iotfleethub:TagResource",
            "iotfleethub:UntagResource"
        ],
        "delete": [
            "iotfleethub:DeleteApplication",
            "iotfleethub:DescribeApplication",
            "sso:DeleteManagedApplicationInstance"
        ]
    },
    "AWS::IoTSiteWise::AccessPolicy": {
        "create": [
            "iotsitewise:CreateAccessPolicy"
        ],
        "read": [
            "iotsitewise:DescribeAccessPolicy"
        ],
        "update": [
            "iotsitewise:DescribeAccessPolicy",
            "iotsitewise:UpdateAccessPolicy"
        ],
        "delete": [
            "iotsitewise:DeleteAccessPolicy"
        ]
    },
    "AWS::IoTSiteWise::Asset": {
        "create": [
            "iotsitewise:AssociateAssets",
            "iotsitewise:CreateAsset",
            "iotsitewise:DescribeAsset",
            "iotsitewise:DescribeAssetModel",
            "iotsitewise:ListAssociatedAssets",
            "iotsitewise:ListTagsForResource",
            "iotsitewise:UpdateAssetProperty"
        ],
        "read": [
            "iotsitewise:DescribeAsset",
            "iotsitewise:DescribeAssetModel",
            "iotsitewise:ListAssociatedAssets",
            "iotsitewise:ListTagsForResource"
        ],
        "update": [
            "iotsitewise:AssociateAssets",
            "iotsitewise:DescribeAsset",
            "iotsitewise:DescribeAssetModel",
            "iotsitewise:DisassociateAssets",
            "iotsitewise:ListAssociatedAssets",
            "iotsitewise:ListTagsForResource",
            "iotsitewise:TagResource",
            "iotsitewise:UpdateAsset",
            "iotsitewise:UpdateAssetProperty",
            "iotsitewise:UntagResource"
        ],
        "delete": [
            "iotsitewise:DeleteAsset",
            "iotsitewise:DescribeAsset",
            "iotsitewise:DescribeAssetModel",
            "iotsitewise:DisassociateAssets",
            "iotsitewise:ListAssociatedAssets",
            "iotsitewise:ListTagsForResource"
        ]
    },
    "AWS::IoTSiteWise::AssetModel": {
        "create": [
            "iotsitewise:CreateAssetModel",
            "iotsitewise:DescribeAssetModel"
        ],
        "read": [
            "iotsitewise:DescribeAssetModel",
            "iotsitewise:ListTagsForResource"
        ],
        "update": [
            "iotsitewise:DescribeAssetModel",
            "iotsitewise:ListTagsForResource",
            "iotsitewise:TagResource",
            "iotsitewise:UntagResource",
            "iotsitewise:UpdateAssetModel"
        ],
        "delete": [
            "iotsitewise:DescribeAssetModel",
            "iotsitewise:DeleteAssetModel"
        ]
    },
    "AWS::IoTSiteWise::Dashboard": {
        "create": [
            "iotsitewise:CreateDashboard",
            "iotsitewise:DescribeAsset",
            "iotsitewise:DescribeAssetModel"
        ],
        "read": [
            "iotsitewise:DescribeDashboard",
            "iotsitewise:ListTagsForResource"
        ],
        "update": [
            "iotsitewise:DescribeDashboard",
            "iotsitewise:UpdateDashboard",
            "iotsitewise:TagResource",
            "iotsitewise:UntagResource",
            "iotsitewise:ListTagsForResource",
            "iotsitewise:DescribeAsset",
            "iotsitewise:DescribeAssetModel"
        ],
        "delete": [
            "iotsitewise:DeleteDashboard"
        ]
    },
    "AWS::IoTSiteWise::Gateway": {
        "create": [
            "iotsitewise:CreateGateway",
            "iotsitewise:UpdateGatewayCapabilityConfiguration",
            "iam:PassRole",
            "iam:GetRole"
        ],
        "read": [
            "iotsitewise:DescribeGateway",
            "iotsitewise:DescribeGatewayCapabilityConfiguration",
            "iotsitewise:ListTagsForResource"
        ],
        "update": [
            "iotsitewise:UpdateGateway",
            "iotsitewise:UpdateGatewayCapabilityConfiguration",
            "iotsitewise:TagResource",
            "iotsitewise:UntagResource",
            "iotsitewise:DescribeGateway",
            "iotsitewise:ListTagsForResource"
        ],
        "delete": [
            "iotsitewise:DeleteGateway"
        ]
    },
    "AWS::IoTSiteWise::Portal": {
        "create": [
            "iotsitewise:CreatePortal",
            "iotsitewise:TagResource",
            "iam:PassRole",
            "sso:CreateManagedApplicationInstance",
            "sso:DescribeRegisteredRegions"
        ],
        "read": [
            "iotsitewise:DescribePortal"
        ],
        "update": [
            "iotsitewise:ListTagsForResource",
            "iotsitewise:TagResource",
            "iotsitewise:UpdatePortal",
            "iotsitewise:UntagResource",
            "iam:PassRole",
            "sso:GetManagedApplicationInstance",
            "sso:UpdateApplicationInstanceDisplayData"
        ],
        "delete": [
            "iotsitewise:DeletePortal",
            "sso:DeleteManagedApplicationInstance"
        ]
    },
    "AWS::IoTSiteWise::Project": {
        "create": [
            "iotsitewise:CreateProject"
        ],
        "read": [
            "iotsitewise:DescribeProject",
            "iotsitewise:ListTagsForResource"
        ],
        "update": [
            "iotsitewise:DescribeProject",
            "iotsitewise:UpdateProject",
            "iotsitewise:TagResource",
            "iotsitewise:UntagResource",
            "iotsitewise:ListTagsForResource"
        ],
        "delete": [
            "iotsitewise:DeleteProject"
        ]
    },
    "AWS::IoTWireless::Destination": {
        "create": [
            "iotwireless:CreateDestination",
            "iotwireless:TagResource",
            "iotwireless:ListTagsForResource"
        ],
        "read": [
            "iotwireless:GetDestination",
            "iotwireless:ListTagsForResource"
        ],
        "update": [
            "iotwireless:UpdateDestination",
            "iotwireless:UntagResource",
            "iotwireless:ListTagsForResource"
        ],
        "delete": [
            "iotwireless:DeleteDestination"
        ]
    },
    "AWS::IoTWireless::PartnerAccount": {
        "create": [
            "iotwireless:AssociateAwsAccountWithPartnerAccount",
            "iotwireless:TagResource",
            "iotwireless:ListTagsForResource"
        ],
        "read": [
            "iotwireless:GetPartnerAccount",
            "iotwireless:ListTagsForResource"
        ],
        "update": [
            "iotwireless:UpdatePartnerAccount",
            "iotwireless:UntagResource",
            "iotwireless:ListTagsForResource"
        ],
        "delete": [
            "iotwireless:DisassociateAwsAccountFromPartnerAccount"
        ]
    },
    "AWS::IoTWireless::WirelessDevice": {
        "create": [
            "iotwireless:CreateWirelessDevice",
            "iotwireless:TagResource",
            "iotwireless:ListTagsForResource"
        ],
        "read": [
            "iotwireless:GetWirelessDevice",
            "iotwireless:ListTagsForResource"
        ],
        "update": [
            "iotwireless:UpdateWirelessDevice",
            "iotwireless:UntagResource",
            "iotwireless:ListTagsForResource"
        ],
        "delete": [
            "iotwireless:DeleteWirelessDevice"
        ]
    },
    "AWS::IoTWireless::WirelessGateway": {
        "create": [
            "iotwireless:CreateWirelessGateway",
            "iotwireless:TagResource",
            "iotwireless:ListTagsForResource"
        ],
        "read": [
            "iotwireless:GetWirelessGateway",
            "iotwireless:ListTagsForResource"
        ],
        "update": [
            "iotwireless:UpdateWirelessGateway",
            "iotwireless:UntagResource",
            "iotwireless:ListTagsForResource"
        ],
        "delete": [
            "iotwireless:DeleteWirelessGateway"
        ]
    },
    "AWS::KMS::Alias": {
        "create": [
            "kms:CreateAlias"
        ],
        "read": [
            "kms:ListAliases"
        ],
        "update": [
            "kms:UpdateAlias"
        ],
        "delete": [
            "kms:DeleteAlias"
        ]
    },
    "AWS::KMS::Key": {
        "create": [
            "kms:CreateKey",
            "kms:EnableKeyRotation",
            "kms:DisableKey",
            "kms:TagResource"
        ],
        "read": [
            "kms:DescribeKey",
            "kms:GetKeyPolicy",
            "kms:GetKeyRotationStatus",
            "kms:ListResourceTags"
        ],
        "update": [
            "kms:DescribeKey",
            "kms:DisableKey",
            "kms:DisableKeyRotation",
            "kms:EnableKey",
            "kms:EnableKeyRotation",
            "kms:PutKeyPolicy",
            "kms:TagResource",
            "kms:UntagResource",
            "kms:UpdateKeyDescription"
        ],
        "delete": [
            "kms:DescribeKey",
            "kms:ScheduleKeyDeletion"
        ]
    },
    "AWS::KMS::ReplicaKey": {
        "create": [
            "kms:ReplicateKey",
            "kms:CreateKey",
            "kms:DescribeKey",
            "kms:DisableKey",
            "kms:TagResource"
        ],
        "read": [
            "kms:DescribeKey",
            "kms:GetKeyPolicy",
            "kms:ListResourceTags"
        ],
        "update": [
            "kms:DescribeKey",
            "kms:DisableKey",
            "kms:EnableKey",
            "kms:PutKeyPolicy",
            "kms:TagResource",
            "kms:UntagResource",
            "kms:UpdateKeyDescription"
        ],
        "delete": [
            "kms:DescribeKey",
            "kms:ScheduleKeyDeletion"
        ]
    },
    "AWS::Kendra::DataSource": {
        "create": [
            "kendra:CreateDataSource",
            "kendra:DescribeDataSource",
            "kendra:ListTagsForResource",
            "iam:PassRole",
            "kendra:TagResource"
        ],
        "read": [
            "kendra:DescribeDataSource",
            "kendra:ListTagsForResource"
        ],
        "update": [
            "kendra:DescribeDataSource",
            "kendra:UpdateDataSource",
            "kendra:ListTagsForResource",
            "kendra:TagResource",
            "kendra:UntagResource",
            "iam:PassRole"
        ],
        "delete": [
            "kendra:DescribeDataSource",
            "kendra:DeleteDataSource"
        ]
    },
    "AWS::Kendra::Faq": {
        "create": [
            "kendra:CreateFaq",
            "kendra:DescribeFaq",
            "iam:PassRole",
            "kendra:ListTagsForResource",
            "kendra:TagResource"
        ],
        "read": [
            "kendra:DescribeFaq",
            "kendra:ListTagsForResource"
        ],
        "update": [
            "kendra:ListTagsForResource",
            "kendra:UntagResource",
            "kendra:TagResource"
        ],
        "delete": [
            "kendra:DeleteFaq",
            "kendra:DescribeFaq"
        ]
    },
    "AWS::Kendra::Index": {
        "create": [
            "kendra:CreateIndex",
            "kendra:DescribeIndex",
            "kendra:UpdateIndex",
            "kendra:ListTagsForResource",
            "iam:PassRole",
            "kendra:TagResource"
        ],
        "read": [
            "kendra:DescribeIndex",
            "kendra:ListTagsForResource"
        ],
        "update": [
            "kendra:DescribeIndex",
            "kendra:UpdateIndex",
            "kendra:ListTagsForResource",
            "kendra:TagResource",
            "kendra:UntagResource",
            "iam:PassRole"
        ],
        "delete": [
            "kendra:DescribeIndex",
            "kendra:DeleteIndex"
        ]
    },
    "AWS::Kinesis::Stream": {
        "create": [
            "kinesis:DescribeStreamSummary",
            "kinesis:CreateStream",
            "kinesis:IncreaseStreamRetentionPeriod",
            "kinesis:StartStreamEncryption",
            "kinesis:AddTagsToStream",
            "kinesis:ListTagsForStream"
        ],
        "read": [
            "kinesis:DescribeStreamSummary",
            "kinesis:ListTagsForStream"
        ],
        "update": [
            "kinesis:DescribeStreamSummary",
            "kinesis:UpdateShardCount",
            "kinesis:IncreaseStreamRetentionPeriod",
            "kinesis:DecreaseStreamRetentionPeriod",
            "kinesis:StartStreamEncryption",
            "kinesis:StopStreamEncryption",
            "kinesis:AddTagsToStream",
            "kinesis:RemoveTagsFromStream",
            "kinesis:ListTagsForStream"
        ],
        "delete": [
            "kinesis:DescribeStreamSummary",
            "kinesis:DeleteStream",
            "kinesis:RemoveTagsFromStream"
        ]
    },
    "AWS::KinesisFirehose::DeliveryStream": {
        "create": [
            "firehose:CreateDeliveryStream",
            "firehose:DescribeDeliveryStream",
            "iam:GetRole",
            "iam:PassRole",
            "kms:CreateGrant",
            "kms:DescribeKey"
        ],
        "read": [
            "firehose:DescribeDeliveryStream",
            "firehose:ListTagsForDeliveryStream"
        ],
        "update": [
            "firehose:UpdateDestination",
            "firehose:DescribeDeliveryStream",
            "firehose:StartDeliveryStreamEncryption",
            "firehose:StopDeliveryStreamEncryption",
            "firehose:ListTagsForDeliveryStream",
            "firehose:TagDeliveryStream",
            "firehose:UntagDeliveryStream",
            "kms:CreateGrant",
            "kms:RevokeGrant",
            "kms:DescribeKey"
        ],
        "delete": [
            "firehose:DeleteDeliveryStream",
            "firehose:DescribeDeliveryStream",
            "kms:RevokeGrant",
            "kms:DescribeKey"
        ]
    },
    "AWS::Lambda::CodeSigningConfig": {
        "create": [
            "lambda:CreateCodeSigningConfig"
        ],
        "read": [
            "lambda:GetCodeSigningConfig"
        ],
        "update": [
            "lambda:UpdateCodeSigningConfig"
        ],
        "delete": [
            "lambda:DeleteCodeSigningConfig"
        ]
    },
    "AWS::Lambda::EventSourceMapping": {
        "create": [
            "lambda:CreateEventSourceMapping",
            "lambda:GetEventSourceMapping"
        ],
        "read": [
            "lambda:GetEventSourceMapping"
        ],
        "update": [
            "lambda:UpdateEventSourceMapping",
            "lambda:GetEventSourceMapping"
        ],
        "delete": [
            "lambda:DeleteEventSourceMapping",
            "lambda:GetEventSourceMapping"
        ]
    },
    "AWS::Lambda::Function": {
        "create": [
            "lambda:CreateFunction",
            "lambda:GetFunction",
            "lambda:PutFunctionConcurrency",
            "iam:PassRole",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "kms:Decrypt",
            "lambda:GetCodeSigningConfig",
            "lambda:GetFunctionCodeSigningConfig"
        ],
        "read": [
            "lambda:GetFunction",
            "lambda:GetFunctionCodeSigningConfig"
        ],
        "update": [
            "lambda:DeleteFunctionConcurrency",
            "lambda:GetFunction",
            "lambda:PutFunctionConcurrency",
            "lambda:ListTags",
            "lambda:TagResource",
            "lambda:UntagResource",
            "lambda:UpdateFunctionConfiguration",
            "lambda:UpdateFunctionCode",
            "iam:PassRole",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "kms:Decrypt",
            "lambda:PutFunctionCodeSigningConfig",
            "lambda:DeleteFunctionCodeSigningConfig",
            "lambda:GetCodeSigningConfig",
            "lambda:GetFunctionCodeSigningConfig"
        ],
        "delete": [
            "lambda:DeleteFunction",
            "ec2:DescribeNetworkInterfaces"
        ]
    },
    "AWS::LicenseManager::Grant": {
        "create": [
            "license-manager:CreateGrant"
        ],
        "read": [
            "license-manager:GetGrant"
        ],
        "update": [
            "license-manager:CreateGrantVersion"
        ],
        "delete": [
            "license-manager:DeleteGrant"
        ]
    },
    "AWS::LicenseManager::License": {
        "create": [
            "license-manager:CreateLicense"
        ],
        "read": [
            "license-manager:GetLicense"
        ],
        "update": [
            "license-manager:CreateLicenseVersion"
        ],
        "delete": [
            "license-manager:DeleteLicense"
        ]
    },
    "AWS::Lightsail::Disk": {
        "create": [
            "lightsail:CreateDisk",
            "lightsail:EnableAddOn",
            "lightsail:DisableAddOn",
            "lightsail:GetRegions",
            "lightsail:TagResource",
            "lightsail:UntagResource"
        ],
        "read": [
            "lightsail:GetDisk",
            "lightsail:GetDisks"
        ],
        "update": [
            "lightsail:GetDisk",
            "lightsail:GetDisks",
            "lightsail:EnableAddOn",
            "lightsail:DisableAddOn",
            "lightsail:TagResource",
            "lightsail:UntagResource"
        ],
        "delete": [
            "lightsail:GetDisk",
            "lightsail:GetDisks",
            "lightsail:DeleteDisk"
        ]
    },
    "AWS::Lightsail::Instance": {
        "create": [
            "lightsail:CreateInstances",
            "lightsail:GetInstances",
            "lightsail:EnableAddOn",
            "lightsail:GetInstance",
            "lightsail:DisableAddOn",
            "lightsail:PutInstancePublicPorts",
            "lightsail:AttachDisk",
            "lightsail:DetachDisk",
            "lightsail:StartInstance",
            "lightsail:StopInstance",
            "lightsail:GetDisk",
            "lightsail:GetRegions",
            "lightsail:TagResource",
            "lightsail:UntagResource"
        ],
        "read": [
            "lightsail:GetInstances",
            "lightsail:GetInstance"
        ],
        "update": [
            "lightsail:GetInstances",
            "lightsail:GetInstance",
            "lightsail:DeleteInstance",
            "lightsail:EnableAddOn",
            "lightsail:DisableAddOn",
            "lightsail:PutInstancePublicPorts",
            "lightsail:AttachDisk",
            "lightsail:DetachDisk",
            "lightsail:StartInstance",
            "lightsail:StopInstance",
            "lightsail:GetDisk",
            "lightsail:TagResource",
            "lightsail:UntagResource"
        ],
        "delete": [
            "lightsail:GetInstances",
            "lightsail:GetInstance",
            "lightsail:DeleteInstance"
        ]
    },
    "AWS::Logs::LogGroup": {
        "create": [
            "logs:DescribeLogGroups",
            "logs:CreateLogGroup",
            "logs:PutRetentionPolicy"
        ],
        "read": [
            "logs:DescribeLogGroups"
        ],
        "update": [
            "logs:DescribeLogGroups",
            "logs:AssociateKmsKey",
            "logs:DisassociateKmsKey",
            "logs:PutRetentionPolicy",
            "logs:DeleteRetentionPolicy"
        ],
        "delete": [
            "logs:DescribeLogGroups",
            "logs:DeleteLogGroup"
        ]
    },
    "AWS::Logs::QueryDefinition": {
        "create": [
            "logs:PutQueryDefinition",
            "logs:DescribeQueryDefinition"
        ],
        "read": [
            "logs:DescribeQueryDefinition"
        ],
        "update": [
            "logs:PutQueryDefinition",
            "logs:DescribeQueryDefinition",
            "logs:DeleteQueryDefinition"
        ],
        "delete": [
            "logs:DescribeQueryDefinition",
            "logs:DeleteQueryDefinition"
        ]
    },
    "AWS::Logs::ResourcePolicy": {
        "create": [
            "logs:PutResourcePolicy",
            "logs:DescribeResourcePolicies"
        ],
        "read": [
            "logs:DescribeResourcePolicies"
        ],
        "update": [
            "logs:PutResourcePolicy",
            "logs:DescribeResourcePolicies",
            "logs:DeleteResourcePolicy"
        ],
        "delete": [
            "logs:DeleteResourcePolicy"
        ]
    },
    "AWS::LookoutEquipment::InferenceScheduler": {
        "create": [
            "iam:PassRole",
            "lookoutequipment:CreateInferenceScheduler",
            "lookoutequipment:DescribeInferenceScheduler"
        ],
        "read": [
            "lookoutequipment:DescribeInferenceScheduler"
        ],
        "update": [
            "lookoutequipment:UpdateInferenceScheduler",
            "lookoutequipment:DescribeInferenceScheduler",
            "lookoutequipment:StopInferenceScheduler",
            "lookoutequipment:StartInferenceScheduler"
        ],
        "delete": [
            "lookoutequipment:DeleteInferenceScheduler",
            "lookoutequipment:StopInferenceScheduler",
            "lookoutequipment:DescribeInferenceScheduler"
        ]
    },
    "AWS::LookoutMetrics::AnomalyDetector": {
        "create": [
            "lookoutmetrics:CreateAnomalyDetector",
            "lookoutmetrics:DeleteAnomalyDetector",
            "lookoutmetrics:CreateMetricSet",
            "iam:PassRole"
        ],
        "read": [
            "lookoutmetrics:DescribeAnomalyDetector",
            "lookoutmetrics:DescribeMetricSet",
            "lookoutmetrics:ListMetricSets"
        ],
        "update": [
            "lookoutmetrics:UpdateAnomalyDetector",
            "lookoutmetrics:UpdateMetricSet"
        ],
        "delete": [
            "lookoutmetrics:DescribeAnomalyDetector",
            "lookoutmetrics:DeleteAnomalyDetector"
        ]
    },
    "AWS::LookoutVision::Project": {
        "create": [
            "lookoutvision:CreateProject"
        ],
        "read": [
            "lookoutvision:DescribeProject"
        ],
        "update": [],
        "delete": [
            "lookoutvision:DeleteProject"
        ]
    },
    "AWS::MWAA::Environment": {
        "create": [
            "airflow:CreateEnvironment"
        ],
        "read": [
            "airflow:GetEnvironment"
        ],
        "update": [
            "airflow:UpdateEnvironment",
            "airflow:TagResource",
            "airflow:UntagResource"
        ],
        "delete": [
            "airflow:DeleteEnvironment"
        ]
    },
    "AWS::Macie::CustomDataIdentifier": {
        "create": [
            "macie2:CreateCustomDataIdentifier",
            "macie2:GetCustomDataIdentifier"
        ],
        "read": [
            "macie2:GetCustomDataIdentifier"
        ],
        "update": [],
        "delete": [
            "macie2:DeleteCustomDataIdentifier"
        ]
    },
    "AWS::Macie::FindingsFilter": {
        "create": [
            "macie2:GetFindingsFilter",
            "macie2:CreateFindingsFilter"
        ],
        "read": [
            "macie2:GetFindingsFilter"
        ],
        "update": [
            "macie2:GetFindingsFilter",
            "macie2:UpdateFindingsFilter"
        ],
        "delete": [
            "macie2:DeleteFindingsFilter"
        ]
    },
    "AWS::Macie::Session": {
        "create": [
            "macie2:GetMacieSession",
            "macie2:EnableMacie"
        ],
        "read": [
            "macie2:GetMacieSession"
        ],
        "update": [
            "macie2:GetMacieSession",
            "macie2:UpdateMacieSession"
        ],
        "delete": [
            "macie2:DisableMacie"
        ]
    },
    "AWS::MediaConnect::Flow": {
        "create": [
            "mediaconnect:CreateFlow",
            "iam:PassRole"
        ],
        "read": [
            "mediaconnect:DescribeFlow"
        ],
        "update": [
            "mediaconnect:DescribeFlow",
            "mediaconnect:UpdateFlow",
            "mediaconnect:UpdateFlowSource"
        ],
        "delete": [
            "mediaconnect:DescribeFlow",
            "mediaconnect:DeleteFlow"
        ]
    },
    "AWS::MediaConnect::FlowEntitlement": {
        "create": [
            "iam:PassRole",
            "mediaconnect:GrantFlowEntitlements"
        ],
        "read": [
            "mediaconnect:DescribeFlow"
        ],
        "update": [
            "mediaconnect:DescribeFlow",
            "mediaconnect:UpdateFlowEntitlement"
        ],
        "delete": [
            "mediaconnect:DescribeFlow",
            "mediaconnect:RevokeFlowEntitlement"
        ]
    },
    "AWS::MediaConnect::FlowOutput": {
        "create": [
            "iam:PassRole",
            "mediaconnect:AddFlowOutputs"
        ],
        "read": [
            "mediaconnect:DescribeFlow"
        ],
        "update": [
            "mediaconnect:DescribeFlow",
            "mediaconnect:UpdateFlowOutput"
        ],
        "delete": [
            "mediaconnect:DescribeFlow",
            "mediaconnect:RemoveFlowOutput"
        ]
    },
    "AWS::MediaConnect::FlowSource": {
        "create": [
            "mediaconnect:CreateFlow",
            "mediaconnect:DescribeFlow",
            "mediaconnect:AddFlowSources",
            "iam:PassRole"
        ],
        "read": [
            "mediaconnect:DescribeFlow"
        ],
        "update": [
            "mediaconnect:DescribeFlow",
            "mediaconnect:UpdateFlowSource"
        ],
        "delete": [
            "mediaconnect:DescribeFlow",
            "mediaconnect:RemoveFlowSource"
        ]
    },
    "AWS::MediaConnect::FlowVpcInterface": {
        "create": [
            "iam:PassRole",
            "mediaconnect:DescribeFlow",
            "mediaconnect:AddFlowVpcInterfaces"
        ],
        "read": [
            "mediaconnect:DescribeFlow"
        ],
        "update": [
            "mediaconnect:DescribeFlow",
            "mediaconnect:AddFlowVpcInterfaces",
            "mediaconnect:RemoveFlowVpcInterface"
        ],
        "delete": [
            "mediaconnect:DescribeFlow",
            "mediaconnect:RemoveFlowVpcInterface"
        ]
    },
    "AWS::MediaPackage::Channel": {
        "create": [
            "mediapackage:CreateChannel",
            "mediapackage:TagResource",
            "mediapackage:ConfigureLogs",
            "iam:CreateServiceLinkedRole"
        ],
        "read": [
            "mediapackage:DescribeChannel"
        ],
        "update": [
            "mediapackage:UpdateChannel",
            "mediapackage:ConfigureLogs",
            "iam:CreateServiceLinkedRole"
        ],
        "delete": [
            "mediapackage:DeleteChannel"
        ]
    },
    "AWS::MediaPackage::OriginEndpoint": {
        "create": [
            "mediapackage:CreateOriginEndpoint",
            "mediapackage:DescribeChannel",
            "mediapackage:TagResource",
            "iam:PassRole"
        ],
        "read": [
            "mediapackage:DescribeOriginEndpoint"
        ],
        "update": [
            "mediapackage:UpdateOriginEndpoint",
            "iam:PassRole"
        ],
        "delete": [
            "mediapackage:DeleteOriginEndpoint"
        ]
    },
    "AWS::MediaPackage::PackagingGroup": {
        "create": [
            "mediapackage-vod:CreatePackagingGroup",
            "mediapackage-vod:DescribePackagingGroup",
            "mediapackage-vod:TagResource",
            "mediapackage-vod:ConfigureLogs",
            "iam:PassRole",
            "iam:CreateServiceLinkedRole"
        ],
        "read": [
            "mediapackage-vod:DescribePackagingGroup"
        ],
        "update": [
            "mediapackage-vod:UpdatePackagingGroup",
            "mediapackage-vod:ConfigureLogs",
            "mediapackage-vod:TagResource",
            "iam:PassRole",
            "iam:CreateServiceLinkedRole"
        ],
        "delete": [
            "mediapackage-vod:DeletePackagingGroup"
        ]
    },
    "AWS::MemoryDB::ACL": {
        "create": [
            "memorydb:CreateACL",
            "memorydb:DescribeACLs",
            "memorydb:ListTags"
        ],
        "read": [
            "memorydb:DescribeACLs",
            "memorydb:ListTags"
        ],
        "update": [
            "memorydb:UpdateACL",
            "memorydb:DescribeACLs",
            "memorydb:ListTags",
            "memorydb:TagResource",
            "memorydb:UntagResource"
        ],
        "delete": [
            "memorydb:ModifyReplicationGroup",
            "memorydb:DeleteACL",
            "memorydb:DescribeACLs"
        ]
    },
    "AWS::MemoryDB::Cluster": {
        "create": [
            "memorydb:CreateCluster",
            "memorydb:DescribeClusters",
            "memorydb:ListTags"
        ],
        "read": [
            "memorydb:DescribeClusters",
            "memorydb:ListTags"
        ],
        "update": [
            "memorydb:UpdateCluster",
            "memorydb:DescribeClusters",
            "memorydb:ListTags",
            "memorydb:TagResource",
            "memorydb:UntagResource"
        ],
        "delete": [
            "memorydb:DeleteCluster",
            "memorydb:DescribeClusters"
        ]
    },
    "AWS::MemoryDB::ParameterGroup": {
        "create": [
            "memorydb:CreateParameterGroup",
            "memorydb:DescribeParameterGroups",
            "memorydb:ListTags"
        ],
        "read": [
            "memorydb:DescribeParameterGroups",
            "memorydb:ListTags"
        ],
        "update": [
            "memorydb:UpdateParameterGroup",
            "memorydb:DescribeParameterGroups",
            "memorydb:DescribeParameters",
            "memorydb:DescribeClusters",
            "memorydb:ListTags",
            "memorydb:TagResource",
            "memorydb:UntagResource"
        ],
        "delete": [
            "memorydb:DeleteParameterGroup"
        ]
    },
    "AWS::MemoryDB::SubnetGroup": {
        "create": [
            "memorydb:CreateSubnetGroup",
            "memorydb:DescribeSubnetGroups",
            "memorydb:ListTags"
        ],
        "read": [
            "memorydb:DescribeSubnetGroups",
            "memorydb:ListTags"
        ],
        "update": [
            "memorydb:UpdateSubnetGroup",
            "memorydb:DescribeSubnetGroups",
            "memorydb:ListTags",
            "memorydb:TagResource",
            "memorydb:UntagResource"
        ],
        "delete": [
            "memorydb:DeleteSubnetGroup",
            "memorydb:DescribeSubnetGroups"
        ]
    },
    "AWS::MemoryDB::User": {
        "create": [
            "memorydb:CreateUser",
            "memorydb:DescribeUsers",
            "memorydb:ListTags"
        ],
        "read": [
            "memorydb:DescribeUsers",
            "memorydb:ListTags"
        ],
        "update": [
            "memorydb:UpdateUser",
            "memorydb:DescribeUsers",
            "memorydb:ListTags",
            "memorydb:TagResource",
            "memorydb:UntagResource"
        ],
        "delete": [
            "memorydb:DeleteUser",
            "memorydb:DescribeUsers"
        ]
    },
    "AWS::NetworkFirewall::Firewall": {
        "create": [
            "ec2:CreateVpcEndpoint",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "network-firewall:CreateFirewall",
            "network-firewall:DescribeFirewallPolicy",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:TagResource"
        ],
        "read": [
            "network-firewall:DescribeFirewall",
            "network-firewall:ListTagsForResources"
        ],
        "update": [
            "network-firewall:AssociateSubnets",
            "network-firewall:DisassociateSubnets",
            "network-firewall:UpdateFirewallDescription",
            "network-firewall:UpdateFirewallDeleteProtection",
            "network-firewall:UpdateSubnetChangeProtection",
            "network-firewall:UpdateFirewallPolicyChangeProtection",
            "network-firewall:AssociateFirewallPolicy",
            "network-firewall:TagResource",
            "network-firewall:UntagResource",
            "network-firewall:DescribeFirewall"
        ],
        "delete": [
            "ec2:DeleteVpcEndpoints",
            "logs:DescribeLogGroups",
            "logs:DescribeResourcePolicies",
            "logs:GetLogDelivery",
            "logs:ListLogDeliveries",
            "network-firewall:DeleteFirewall",
            "network-firewall:UntagResource"
        ]
    },
    "AWS::NetworkFirewall::FirewallPolicy": {
        "create": [
            "network-firewall:CreateFirewallPolicy",
            "network-firewall:DescribeFirewallPolicy",
            "network-firewall:TagResource"
        ],
        "read": [
            "network-firewall:DescribeFirewallPolicy",
            "network-firewall:ListTagsForResources"
        ],
        "update": [
            "network-firewall:UpdateFirewallPolicy",
            "network-firewall:DescribeFirewallPolicy",
            "network-firewall:TagResource",
            "network-firewall:UntagResource"
        ],
        "delete": [
            "network-firewall:DeleteFirewallPolicy",
            "network-firewall:DescribeFirewallPolicy",
            "network-firewall:UntagResource"
        ]
    },
    "AWS::NetworkFirewall::LoggingConfiguration": {
        "create": [
            "logs:CreateLogDelivery",
            "logs:GetLogDelivery",
            "logs:ListLogDeliveries",
            "s3:PutBucketPolicy",
            "s3:GetBucketPolicy",
            "logs:PutResourcePolicy",
            "logs:DescribeResourcePolicies",
            "logs:DescribeLogGroups",
            "iam:CreateServiceLinkedRole",
            "firehose:TagDeliveryStream",
            "network-firewall:UpdateLoggingConfiguration"
        ],
        "read": [
            "logs:GetLogDelivery",
            "logs:ListLogDeliveries",
            "network-firewall:DescribeLoggingConfiguration"
        ],
        "update": [
            "logs:CreateLogDelivery",
            "logs:DeleteLogDelivery",
            "logs:GetLogDelivery",
            "logs:UpdateLogDelivery",
            "logs:ListLogDeliveries",
            "s3:PutBucketPolicy",
            "s3:GetBucketPolicy",
            "logs:PutResourcePolicy",
            "logs:DescribeResourcePolicies",
            "logs:DescribeLogGroups",
            "iam:CreateServiceLinkedRole",
            "firehose:TagDeliveryStream",
            "network-firewall:UpdateLoggingConfiguration"
        ],
        "delete": [
            "logs:DeleteLogDelivery",
            "logs:ListLogDeliveries",
            "logs:GetLogDelivery",
            "network-firewall:UpdateLoggingConfiguration"
        ]
    },
    "AWS::NetworkFirewall::RuleGroup": {
        "create": [
            "network-firewall:CreateRuleGroup",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:TagResource"
        ],
        "read": [
            "network-firewall:DescribeRuleGroup",
            "network-firewall:ListTagsForResources"
        ],
        "update": [
            "network-firewall:UpdateRuleGroup",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:TagResource",
            "network-firewall:UntagResource"
        ],
        "delete": [
            "network-firewall:DeleteRuleGroup",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:UntagResource"
        ]
    },
    "AWS::NetworkManager::Device": {
        "create": [
            "networkmanager:CreateDevice"
        ],
        "read": [
            "networkmanager:GetDevices"
        ],
        "update": [
            "networkmanager:UpdateDevice",
            "networkmanager:ListTagsForResource",
            "networkmanager:TagResource",
            "networkmanager:UntagResource"
        ],
        "delete": [
            "networkmanager:DeleteDevice"
        ]
    },
    "AWS::NetworkManager::GlobalNetwork": {
        "create": [
            "networkmanager:CreateGlobalNetwork",
            "networkmanager:DescribeGlobalNetworks",
            "iam:CreateServiceLinkedRole"
        ],
        "read": [
            "networkmanager:DescribeGlobalNetworks"
        ],
        "update": [
            "networkmanager:UpdateGlobalNetwork",
            "networkmanager:DescribeGlobalNetworks",
            "networkmanager:TagResource",
            "networkmanager:UntagResource",
            "networkmanager:ListTagsForResource"
        ],
        "delete": [
            "networkmanager:DeleteGlobalNetwork",
            "networkmanager:DescribeGlobalNetworks"
        ]
    },
    "AWS::NetworkManager::Link": {
        "create": [
            "networkmanager:CreateLink"
        ],
        "read": [
            "networkmanager:GetLinks"
        ],
        "update": [
            "networkmanager:ListTagsForResource",
            "networkmanager:TagResource",
            "networkmanager:UntagResource",
            "networkmanager:UpdateLink"
        ],
        "delete": [
            "networkmanager:DeleteLink"
        ]
    },
    "AWS::NetworkManager::Site": {
        "create": [
            "networkmanager:CreateSite"
        ],
        "read": [
            "networkmanager:GetSites"
        ],
        "update": [
            "networkmanager:ListTagsForResource",
            "networkmanager:TagResource",
            "networkmanager:UntagResource",
            "networkmanager:UpdateSite"
        ],
        "delete": [
            "networkmanager:DeleteSite"
        ]
    },
    "AWS::NimbleStudio::LaunchProfile": {
        "create": [
            "nimble:CreateLaunchProfile",
            "nimble:TagResource",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:RunInstances",
            "ec2:DescribeSubnets"
        ],
        "read": [
            "nimble:GetLaunchProfile"
        ],
        "update": [
            "nimble:UpdateLaunchProfile"
        ],
        "delete": [
            "nimble:DeleteLaunchProfile",
            "nimble:UntagResource"
        ]
    },
    "AWS::NimbleStudio::StreamingImage": {
        "create": [
            "nimble:CreateStreamingImage",
            "nimble:TagResource",
            "ec2:DescribeImages",
            "ec2:DescribeSnapshots",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifySnapshotAttribute",
            "ec2:ModifyImageAttribute",
            "ec2:RegisterImage",
            "kms:Encrypt",
            "kms:Decrypt",
            "kms:CreateGrant",
            "kms:ListGrants",
            "kms:GenerateDataKey"
        ],
        "read": [
            "nimble:GetStreamingImage"
        ],
        "update": [
            "nimble:UpdateStreamingImage"
        ],
        "delete": [
            "nimble:DeleteStreamingImage",
            "nimble:UntagResource",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifySnapshotAttribute",
            "ec2:DeregisterImage",
            "ec2:DeleteSnapshot",
            "kms:ListGrants",
            "kms:RetireGrant"
        ]
    },
    "AWS::NimbleStudio::Studio": {
        "create": [
            "iam:PassRole",
            "nimble:CreateStudio",
            "nimble:TagResource",
            "sso:CreateManagedApplicationInstance"
        ],
        "read": [
            "nimble:GetStudio"
        ],
        "update": [
            "iam:PassRole",
            "nimble:UpdateStudio"
        ],
        "delete": [
            "nimble:DeleteStudio",
            "nimble:UntagResource",
            "sso:DeleteManagedApplicationInstance",
            "sso:GetManagedApplicationInstance"
        ]
    },
    "AWS::NimbleStudio::StudioComponent": {
        "create": [
            "nimble:CreateStudioComponent",
            "nimble:TagResource",
            "ds:AuthorizeApplication",
            "ec2:DescribeSecurityGroups",
            "fsx:DescribeFilesystems",
            "ds:DescribeDirectories"
        ],
        "read": [
            "nimble:GetStudioComponent"
        ],
        "update": [
            "nimble:UpdateStudioComponent",
            "ds:AuthorizeApplication",
            "ec2:DescribeSecurityGroups",
            "fsx:DescribeFilesystems",
            "ds:DescribeDirectories"
        ],
        "delete": [
            "nimble:DeleteStudioComponent",
            "nimble:UntagResource",
            "ds:UnauthorizeApplication"
        ]
    },
    "AWS::OpenSearchService::Domain": {
        "create": [
            "es:CreateDomain",
            "es:DescribeDomain",
            "es:AddTags",
            "es:ListTags"
        ],
        "read": [
            "es:DescribeDomain",
            "es:ListTags"
        ],
        "update": [
            "es:UpdateDomain",
            "es:UpgradeDomain",
            "es:DescribeDomain",
            "es:AddTags",
            "es:RemoveTags",
            "es:ListTags"
        ],
        "delete": [
            "es:DeleteDomain",
            "es:DescribeDomain"
        ]
    },
    "AWS::OpsWorksCM::Server": {
        "create": [
            "opsworks-cm:CreateServer",
            "opsworks-cm:DescribeServers",
            "iam:PassRole"
        ],
        "read": [
            "opsworks-cm:DescribeServers"
        ],
        "update": [
            "opsworks-cm:UpdateServer",
            "opsworks-cm:TagResource",
            "opsworks-cm:UntagResource",
            "opsworks-cm:DescribeServers"
        ],
        "delete": [
            "opsworks-cm:DeleteServer",
            "opsworks-cm:DescribeServers"
        ]
    },
    "AWS::QLDB::Stream": {
        "create": [
            "qldb:StreamJournalToKinesis",
            "qldb:DescribeJournalKinesisStream"
        ],
        "read": [
            "qldb:DescribeJournalKinesisStream"
        ],
        "update": [
            "qldb:DescribeJournalKinesisStream",
            "qldb:UntagResource",
            "qldb:TagResource"
        ],
        "delete": [
            "qldb:CancelJournalKinesisStream",
            "qldb:DescribeJournalKinesisStream"
        ]
    },
    "AWS::QuickSight::Analysis": {
        "create": [
            "quicksight:DescribeAnalysis",
            "quicksight:DescribeAnalysisPermissions",
            "quicksight:CreateAnalysis",
            "quicksight:DescribeTemplate",
            "quicksight:DescribeTheme",
            "quicksight:PassDataSet",
            "quicksight:ListTagsForResource"
        ],
        "read": [
            "quicksight:DescribeAnalysis"
        ],
        "update": [
            "quicksight:DescribeAnalysis",
            "quicksight:DescribeAnalysisPermissions",
            "quicksight:UpdateAnalysis",
            "quicksight:UpdateAnalysisPermissions",
            "quicksight:DescribeTheme",
            "quicksight:TagResource",
            "quicksight:UntagResource",
            "quicksight:ListTagsForResource"
        ],
        "delete": [
            "quicksight:DescribeAnalysis",
            "quicksight:DeleteAnalysis"
        ]
    },
    "AWS::QuickSight::Dashboard": {
        "create": [
            "quicksight:DescribeDashboard",
            "quicksight:DescribeDashboardPermissions",
            "quicksight:CreateDashboard",
            "quicksight:DescribeTemplate",
            "quicksight:DescribeTheme",
            "quicksight:PassDataSet",
            "quicksight:ListTagsForResource"
        ],
        "read": [
            "quicksight:DescribeDashboard"
        ],
        "update": [
            "quicksight:DescribeDashboard",
            "quicksight:DescribeDashboardPermissions",
            "quicksight:UpdateDashboard",
            "quicksight:UpdateDashboardPermissions",
            "quicksight:UpdateDashboardPublishedVersion",
            "quicksight:DescribeTheme",
            "quicksight:TagResource",
            "quicksight:UntagResource",
            "quicksight:ListTagsForResource"
        ],
        "delete": [
            "quicksight:DescribeDashboard",
            "quicksight:DeleteDashboard"
        ]
    },
    "AWS::QuickSight::DataSet": {
        "create": [
            "quicksight:DescribeDataSet",
            "quicksight:DescribeDataSetPermissions",
            "quicksight:DescribeIngestion",
            "quicksight:CreateDataSet",
            "quicksight:PassDataSource",
            "quicksight:PassDataSet",
            "quicksight:TagResource",
            "quicksight:ListTagsForResource"
        ],
        "read": [
            "quicksight:DescribeDataSet",
            "quicksight:DescribeDataSetPermissions",
            "quicksight:ListTagsForResource"
        ],
        "update": [
            "quicksight:DescribeDataSet",
            "quicksight:DescribeDataSetPermissions",
            "quicksight:PassDataSource",
            "quicksight:UpdateDataSet",
            "quicksight:UpdateDataSetPermissions",
            "quicksight:PassDataSet",
            "quicksight:DescribeIngestion",
            "quicksight:ListIngestions",
            "quicksight:CancelIngestion",
            "quicksight:TagResource",
            "quicksight:UntagResource",
            "quicksight:ListTagsForResource"
        ],
        "delete": [
            "quicksight:DescribeDataSet",
            "quicksight:DeleteDataSet",
            "quicksight:ListTagsForResource",
            "quicksight:DescribeIngestion"
        ]
    },
    "AWS::QuickSight::DataSource": {
        "create": [
            "quicksight:CreateDataSource",
            "quicksight:DescribeDataSource",
            "quicksight:DescribeDataSourcePermissions",
            "quicksight:TagResource",
            "quicksight:ListTagsForResource"
        ],
        "read": [
            "quicksight:DescribeDataSource",
            "quicksight:DescribeDataSourcePermissions",
            "quicksight:ListTagsForResource"
        ],
        "update": [
            "quicksight:DescribeDataSource",
            "quicksight:DescribeDataSourcePermissions",
            "quicksight:UpdateDataSource",
            "quicksight:UpdateDataSourcePermissions",
            "quicksight:TagResource",
            "quicksight:UntagResource",
            "quicksight:ListTagsForResource"
        ],
        "delete": [
            "quicksight:DescribeDataSource",
            "quicksight:DescribeDataSourcePermissions",
            "quicksight:DeleteDataSource",
            "quicksight:ListTagsForResource"
        ]
    },
    "AWS::QuickSight::Template": {
        "create": [
            "quicksight:DescribeTemplate",
            "quicksight:DescribeTemplatePermissions",
            "quicksight:CreateTemplate",
            "quicksight:DescribeAnalysis",
            "quicksight:ListTagsForResource"
        ],
        "read": [
            "quicksight:DescribeTemplate"
        ],
        "update": [
            "quicksight:UpdateTemplate",
            "quicksight:UpdateTemplatePermissions",
            "quicksight:DescribeAnalysis",
            "quicksight:TagResource",
            "quicksight:UntagResource",
            "quicksight:ListTagsForResource"
        ],
        "delete": [
            "quicksight:DescribeTemplate",
            "quicksight:DeleteTemplate"
        ]
    },
    "AWS::QuickSight::Theme": {
        "create": [
            "quicksight:DescribeTheme",
            "quicksight:DescribeThemePermissions",
            "quicksight:CreateTheme",
            "quicksight:ListTagsForResource"
        ],
        "read": [
            "quicksight:DescribeTheme"
        ],
        "update": [
            "quicksight:DescribeTheme",
            "quicksight:DescribeThemePermissions",
            "quicksight:UpdateTheme",
            "quicksight:UpdateThemePermissions",
            "quicksight:TagResource",
            "quicksight:UntagResource",
            "quicksight:ListTagsForResource"
        ],
        "delete": [
            "quicksight:DescribeTheme",
            "quicksight:DeleteTheme"
        ]
    },
    "AWS::RDS::DBProxy": {
        "create": [
            "rds:CreateDBProxy",
            "rds:DescribeDBProxies",
            "iam:PassRole"
        ],
        "read": [
            "rds:DescribeDBProxies"
        ],
        "update": [
            "rds:ModifyDBProxy",
            "rds:AddTagsToResource",
            "rds:RemoveTagsFromResource",
            "iam:PassRole"
        ],
        "delete": [
            "rds:DescribeDBProxies",
            "rds:DeleteDBProxy"
        ]
    },
    "AWS::RDS::DBProxyEndpoint": {
        "create": [
            "rds:CreateDBProxyEndpoint",
            "rds:DescribeDBProxyEndpoints"
        ],
        "read": [
            "rds:DescribeDBProxyEndpoints",
            "rds:ListTagsForResource"
        ],
        "update": [
            "rds:ModifyDBProxyEndpoint",
            "rds:AddTagsToResource",
            "rds:RemoveTagsFromResource"
        ],
        "delete": [
            "rds:DescribeDBProxyEndpoints",
            "rds:DeleteDBProxyEndpoint"
        ]
    },
    "AWS::RDS::DBProxyTargetGroup": {
        "create": [
            "rds:DescribeDBProxies",
            "rds:DescribeDBProxyTargetGroups",
            "rds:ModifyDBProxyTargetGroup",
            "rds:RegisterDBProxyTargets"
        ],
        "read": [
            "rds:DescribeDBProxyTargetGroups",
            "rds:DescribeDBProxyTargets"
        ],
        "update": [
            "rds:DescribeDBProxyTargetGroups",
            "rds:ModifyDBProxyTargetGroup",
            "rds:RegisterDBProxyTargets",
            "rds:DeregisterDBProxyTargets"
        ],
        "delete": [
            "rds:DeregisterDBProxyTargets"
        ]
    },
    "AWS::RDS::GlobalCluster": {
        "create": [
            "rds:CreateGlobalCluster",
            "rds:DescribeDBClusters",
            "rds:DescribeGlobalClusters"
        ],
        "read": [
            "rds:DescribeGlobalClusters"
        ],
        "update": [
            "rds:ModifyGlobalCluster",
            "rds:DescribeGlobalClusters"
        ],
        "delete": [
            "rds:DescribeGlobalClusters",
            "rds:DeleteGlobalCluster",
            "rds:RemoveFromGlobalCluster",
            "rds:DescribeDBClusters"
        ]
    },
    "AWS::Redshift::Cluster": {
        "create": [
            "redshift:DescribeClusters",
            "redshift:CreateCluster",
            "redshift:RestoreFromClusterSnapshot",
            "redshift:EnableLogging"
        ],
        "read": [
            "redshift:DescribeClusters",
            "redshift:DescribeLoggingStatus",
            "redshift:DescribeSnapshotCopyGrant",
            "redshift:DescribeClusterDbRevisions"
        ],
        "update": [
            "redshift:DescribeClusters",
            "redshift:ModifyCluster",
            "redshift:ModifyClusterIamRoles",
            "redshift:EnableLogging",
            "redshift:CreateTags",
            "redshift:DeleteTags",
            "redshift:DisableLogging",
            "redshift:RebootCluster",
            "redshift:EnableSnapshotCopy",
            "redshift:DisableSnapshotCopy",
            "redshift:ModifySnapshotCopyRetentionPeriod",
            "redshift:ModifyAquaConfiguration",
            "redshift:ResizeCluster",
            "redshift:ModifyClusterMaintenance",
            "redshift:DescribeClusterDbRevisions",
            "redshift:ModifyClusterDbRevisions",
            "redshift:PauseCluster",
            "redshift:ResumeCluster",
            "redshift:RotateEncryptionKey"
        ],
        "delete": [
            "redshift:DescribeClusters",
            "redshift:DeleteCluster"
        ]
    },
    "AWS::ResourceGroups::Group": {
        "create": [
            "resource-groups:CreateGroup",
            "resource-groups:Tag",
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources",
            "resource-groups:ListGroupResources",
            "resource-groups:GroupResources"
        ],
        "read": [
            "resource-groups:GetGroup",
            "resource-groups:GetGroupQuery",
            "resource-groups:GetTags",
            "resource-groups:GetGroupConfiguration",
            "resource-groups:ListGroupResources"
        ],
        "update": [
            "resource-groups:UpdateGroup",
            "resource-groups:GetTags",
            "resource-groups:GetGroupQuery",
            "resource-groups:UpdateGroupQuery",
            "resource-groups:Tag",
            "resource-groups:Untag",
            "resource-groups:PutGroupConfiguration",
            "resource-groups:GetGroupConfiguration",
            "resource-groups:ListGroupResources",
            "resource-groups:GroupResources",
            "resource-groups:UnGroupResources"
        ],
        "delete": [
            "resource-groups:DeleteGroup",
            "resource-groups:UnGroupResources"
        ]
    },
    "AWS::RoboMaker::Fleet": {
        "create": [
            "robomaker:CreateFleet"
        ],
        "read": [
            "robomaker:DescribeFleet"
        ],
        "update": [
            "robomaker:TagResource",
            "robomaker:UntagResource"
        ],
        "delete": [
            "robomaker:DeleteFleet"
        ]
    },
    "AWS::RoboMaker::Robot": {
        "create": [
            "robomaker:CreateRobot",
            "robomaker:RegisterRobot"
        ],
        "read": [
            "robomaker:DescribeRobot"
        ],
        "update": [
            "robomaker:TagResource",
            "robomaker:UntagResource"
        ],
        "delete": [
            "robomaker:DescribeRobot",
            "robomaker:DeleteRobot",
            "robomaker:DeregisterRobot"
        ]
    },
    "AWS::RoboMaker::SimulationApplication": {
        "create": [
            "robomaker:CreateSimulationApplication"
        ],
        "read": [
            "robomaker:DescribeSimulationApplication"
        ],
        "update": [
            "robomaker:TagResource",
            "robomaker:UntagResource",
            "robomaker:UpdateSimulationApplication"
        ],
        "delete": [
            "robomaker:DeleteSimulationApplication"
        ]
    },
    "AWS::Route53::HealthCheck": {
        "create": [
            "route53:CreateHealthCheck",
            "route53:ChangeTagsForResource",
            "cloudwatch:DescribeAlarms",
            "route53-recovery-control-config:DescribeRoutingControl"
        ],
        "read": [
            "route53:GetHealthCheck",
            "route53:ListTagsForResource"
        ],
        "update": [
            "route53:UpdateHealthCheck",
            "route53:ChangeTagsForResource",
            "route53:ListTagsForResource",
            "cloudwatch:DescribeAlarms"
        ],
        "delete": [
            "route53:DeleteHealthCheck"
        ]
    },
    "AWS::Route53::HostedZone": {
        "create": [
            "route53:CreateHostedZone",
            "route53:CreateQueryLoggingConfig",
            "route53:ChangeTagsForResource",
            "route53:GetChange",
            "route53:AssociateVPCWithHostedZone",
            "ec2:DescribeVpcs"
        ],
        "read": [
            "route53:GetHostedZone",
            "route53:ListTagsForResource",
            "route53:ListQueryLoggingConfigs"
        ],
        "update": [
            "route53:GetChange",
            "route53:ListTagsForResource",
            "route53:UpdateHostedZoneComment",
            "route53:ChangeTagsForResource",
            "route53:AssociateVPCWithHostedZone",
            "route53:DisassociateVPCFromHostedZone",
            "route53:CreateQueryLoggingConfig",
            "route53:DeleteQueryLoggingConfig",
            "ec2:DescribeVpcs"
        ],
        "delete": [
            "route53:DeleteHostedZone",
            "route53:DeleteQueryLoggingConfig",
            "route53:ListQueryLoggingConfigs",
            "route53:GetChange"
        ]
    },
    "AWS::Route53::KeySigningKey": {
        "create": [
            "route53:CreateKeySigningKey",
            "kms:DescribeKey",
            "kms:GetPublicKey",
            "kms:Sign",
            "kms:CreateGrant"
        ],
        "read": [
            "route53:GetDNSSEC"
        ],
        "update": [
            "route53:ActivateKeySigningKey",
            "route53:DeactivateKeySigningKey",
            "kms:DescribeKey",
            "kms:GetPublicKey",
            "kms:Sign",
            "kms:CreateGrant"
        ],
        "delete": [
            "route53:DeactivateKeySigningKey",
            "route53:DeleteKeySigningKey",
            "kms:DescribeKey",
            "kms:GetPublicKey",
            "kms:Sign",
            "kms:CreateGrant"
        ]
    },
    "AWS::Route53RecoveryControl::ControlPanel": {
        "create": [
            "route53-recovery-control-config:CreateControlPanel",
            "route53-recovery-control-config:DescribeCluster",
            "route53-recovery-control-config:DescribeControlPanel"
        ],
        "read": [
            "route53-recovery-control-config:DescribeControlPanel"
        ],
        "update": [
            "route53-recovery-control-config:UpdateControlPanel",
            "route53-recovery-control-config:DescribeControlPanel"
        ],
        "delete": [
            "route53-recovery-control-config:DeleteControlPanel"
        ]
    },
    "AWS::Route53RecoveryControl::RoutingControl": {
        "create": [
            "route53-recovery-control-config:CreateRoutingControl",
            "route53-recovery-control-config:DescribeRoutingControl",
            "route53-recovery-control-config:DescribeControlPanel",
            "route53-recovery-control-config:DescribeCluster"
        ],
        "read": [
            "route53-recovery-control-config:DescribeRoutingControl"
        ],
        "update": [
            "route53-recovery-control-config:UpdateRoutingControl",
            "route53-recovery-control-config:DescribeRoutingControl",
            "route53-recovery-control-config:DescribeControlPanel"
        ],
        "delete": [
            "route53-recovery-control-config:DeleteRoutingControl"
        ]
    },
    "AWS::Route53RecoveryControl::SafetyRule": {
        "create": [
            "route53-recovery-control-config:CreateSafetyRule",
            "route53-recovery-control-config:DescribeControlPanel",
            "route53-recovery-control-config:DescribeRoutingControl"
        ],
        "read": [
            "route53-recovery-control-config:DescribeSafetyRule"
        ],
        "update": [
            "route53-recovery-control-config:UpdateSafetyRule"
        ],
        "delete": [
            "route53-recovery-control-config:DeleteSafetyRule"
        ]
    },
    "AWS::Route53RecoveryReadiness::Cell": {
        "create": [
            "route53-recovery-readiness:CreateCell",
            "route53-recovery-readiness:GetCell"
        ],
        "read": [
            "route53-recovery-readiness:GetCell"
        ],
        "update": [
            "route53-recovery-readiness:UpdateCell",
            "route53-recovery-readiness:GetCell"
        ],
        "delete": [
            "route53-recovery-readiness:DeleteCell",
            "route53-recovery-readiness:GetCell"
        ]
    },
    "AWS::Route53RecoveryReadiness::ReadinessCheck": {
        "create": [
            "route53-recovery-readiness:CreateReadinessCheck",
            "route53-recovery-readiness:GetResourceSet",
            "route53-recovery-readiness:GetReadinessCheck"
        ],
        "read": [
            "route53-recovery-readiness:GetReadinessCheck"
        ],
        "update": [
            "route53-recovery-readiness:UpdateReadinessCheck",
            "route53-recovery-readiness:GetResourceSet",
            "route53-recovery-readiness:GetReadinessCheck"
        ],
        "delete": [
            "route53-recovery-readiness:DeleteReadinessCheck",
            "route53-recovery-readiness:GetReadinessCheck"
        ]
    },
    "AWS::Route53RecoveryReadiness::RecoveryGroup": {
        "create": [
            "route53-recovery-readiness:CreateRecoveryGroup",
            "route53-recovery-readiness:GetRecoveryGroup",
            "route53-recovery-readiness:GetCell"
        ],
        "read": [
            "route53-recovery-readiness:GetRecoveryGroup"
        ],
        "update": [
            "route53-recovery-readiness:UpdateRecoveryGroup",
            "route53-recovery-readiness:GetRecoveryGroup",
            "route53-recovery-readiness:GetCell"
        ],
        "delete": [
            "route53-recovery-readiness:DeleteRecoveryGroup",
            "route53-recovery-readiness:GetRecoveryGroup"
        ]
    },
    "AWS::Route53RecoveryReadiness::ResourceSet": {
        "create": [
            "route53-recovery-readiness:CreateResourceSet",
            "route53-recovery-readiness:GetResourceSet",
            "route53-recovery-readiness:GetRecoveryGroup",
            "route53-recovery-readiness:GetCell"
        ],
        "read": [
            "route53-recovery-readiness:GetResourceSet"
        ],
        "update": [
            "route53-recovery-readiness:UpdateResourceSet",
            "route53-recovery-readiness:GetResourceSet",
            "route53-recovery-readiness:GetRecoveryGroup",
            "route53-recovery-readiness:GetCell"
        ],
        "delete": [
            "route53-recovery-readiness:DeleteResourceSet",
            "route53-recovery-readiness:GetResourceSet"
        ]
    },
    "AWS::Route53Resolver::FirewallDomainList": {
        "create": [
            "route53resolver:CreateFirewallDomainList",
            "route53resolver:UpdateFirewallDomains",
            "route53resolver:ImportFirewallDomains",
            "route53resolver:TagResource"
        ],
        "read": [
            "route53resolver:GetFirewallDomainList",
            "route53resolver:ListFirewallDomains",
            "route53resolver:ListTagsForResource"
        ],
        "update": [
            "route53resolver:UpdateFirewallDomains",
            "route53resolver:ImportFirewallDomains",
            "route53resolver:TagResource",
            "route53resolver:UntagResource"
        ],
        "delete": [
            "route53resolver:DeleteFirewallDomainList",
            "route53resolver:UntagResource"
        ]
    },
    "AWS::Route53Resolver::FirewallRuleGroup": {
        "create": [
            "route53resolver:CreateFirewallRuleGroup",
            "route53resolver:CreateFirewallRule",
            "route53resolver:TagResource"
        ],
        "read": [
            "route53resolver:GetFirewallRuleGroup",
            "route53resolver:ListFirewallRules",
            "route53resolver:ListTagsForResource"
        ],
        "update": [
            "route53resolver:CreateFirewallRule",
            "route53resolver:DeleteFirewallRule",
            "route53resolver:UpdateFirewallRule",
            "route53resolver:TagResource",
            "route53resolver:UntagResource"
        ],
        "delete": [
            "route53resolver:DeleteFirewallRuleGroup",
            "route53resolver:DeleteFirewallRule",
            "route53resolver:UntagResource"
        ]
    },
    "AWS::Route53Resolver::FirewallRuleGroupAssociation": {
        "create": [
            "route53resolver:AssociateFirewallRuleGroup",
            "route53resolver:TagResource"
        ],
        "read": [
            "route53resolver:GetFirewallRuleGroupAssociation",
            "route53resolver:ListTagsForResource"
        ],
        "update": [
            "route53resolver:UpdateFirewallRuleGroupAssociation",
            "route53resolver:TagResource",
            "route53resolver:UntagResource"
        ],
        "delete": [
            "route53resolver:DisassociateFirewallRuleGroup",
            "route53resolver:UntagResource"
        ]
    },
    "AWS::S3::AccessPoint": {
        "create": [
            "s3:CreateAccessPoint",
            "s3:PutAccessPointPolicy",
            "s3:PutAccessPointPublicAccessBlock"
        ],
        "read": [
            "s3:GetAccessPoint",
            "s3:GetAccessPointPolicy",
            "s3:GetAccessPointPolicyStatus"
        ],
        "update": [
            "s3:PutAccessPointPolicy",
            "s3:PutAccessPointPublicAccessBlock",
            "s3:DeleteAccessPointPolicy"
        ],
        "delete": [
            "s3:DeleteAccessPointPolicy",
            "s3:DeleteAccessPoint"
        ]
    },
    "AWS::S3::MultiRegionAccessPoint": {
        "create": [
            "s3:CreateMultiRegionAccessPoint",
            "s3:DescribeMultiRegionAccessPointOperation",
            "s3:GetMultiRegionAccessPoint"
        ],
        "read": [
            "s3:GetMultiRegionAccessPoint"
        ],
        "update": [
            "s3:DescribeMultiRegionAccessPointOperation",
            "s3:GetMultiRegionAccessPoint"
        ],
        "delete": [
            "s3:DeleteMultiRegionAccessPoint",
            "s3:DescribeMultiRegionAccessPointOperation",
            "s3:GetMultiRegionAccessPoint"
        ]
    },
    "AWS::S3::MultiRegionAccessPointPolicy": {
        "create": [
            "s3:PutMultiRegionAccessPointPolicy",
            "s3:DescribeMultiRegionAccessPointOperation"
        ],
        "read": [
            "s3:GetMultiRegionAccessPointPolicy",
            "s3:GetMultiRegionAccessPointPolicyStatus"
        ],
        "update": [
            "s3:PutMultiRegionAccessPointPolicy",
            "s3:DescribeMultiRegionAccessPointOperation"
        ],
        "delete": [
            "s3:GetMultiRegionAccessPointPolicy",
            "s3:GetMultiRegionAccessPoint"
        ]
    },
    "AWS::S3::StorageLens": {
        "create": [
            "s3:PutStorageLensConfiguration",
            "s3:PutStorageLensConfigurationTagging"
        ],
        "read": [
            "s3:GetStorageLensConfiguration",
            "s3:GetStorageLensConfigurationTagging"
        ],
        "update": [
            "s3:PutStorageLensConfiguration",
            "s3:PutStorageLensConfigurationTagging"
        ],
        "delete": [
            "s3:DeleteStorageLensConfiguration",
            "s3:DeleteStorageLensConfigurationTagging"
        ]
    },
    "AWS::S3ObjectLambda::AccessPoint": {
        "create": [
            "s3:CreateAccessPointForObjectLambda",
            "s3:PutAccessPointConfigurationForObjectLambda"
        ],
        "read": [
            "s3:GetAccessPointForObjectLambda",
            "s3:GetAccessPointPolicyStatusForObjectLambda",
            "s3:GetAccessPointConfigurationForObjectLambda"
        ],
        "update": [
            "s3:PutAccessPointConfigurationForObjectLambda"
        ],
        "delete": [
            "s3:DeleteAccessPointForObjectLambda"
        ]
    },
    "AWS::S3ObjectLambda::AccessPointPolicy": {
        "create": [
            "s3:PutAccessPointPolicyForObjectLambda",
            "s3:GetAccessPointPolicyForObjectLambda"
        ],
        "read": [
            "s3:GetAccessPointPolicyForObjectLambda"
        ],
        "update": [
            "s3:PutAccessPointPolicyForObjectLambda",
            "s3:GetAccessPointPolicyForObjectLambda"
        ],
        "delete": [
            "s3:DeleteAccessPointPolicyForObjectLambda",
            "s3:GetAccessPointPolicyForObjectLambda"
        ]
    },
    "AWS::S3Outposts::AccessPoint": {
        "create": [
            "s3-outposts:CreateAccessPoint",
            "s3-outposts:GetAccessPoint",
            "s3-outposts:PutAccessPointPolicy",
            "s3-outposts:GetAccessPointPolicy"
        ],
        "read": [
            "s3-outposts:GetAccessPoint",
            "s3-outposts:GetAccessPointPolicy"
        ],
        "update": [
            "s3-outposts:GetAccessPoint",
            "s3-outposts:PutAccessPointPolicy",
            "s3-outposts:GetAccessPointPolicy",
            "s3-outposts:DeleteAccessPointPolicy"
        ],
        "delete": [
            "s3-outposts:DeleteAccessPoint",
            "s3-outposts:DeleteAccessPointPolicy"
        ]
    },
    "AWS::S3Outposts::Bucket": {
        "create": [
            "s3-outposts:CreateBucket",
            "s3-outposts:PutBucketTagging",
            "s3-outposts:PutBucketLifecycleConfiguration"
        ],
        "read": [
            "s3-outposts:GetBucket",
            "s3-outposts:GetBucketTagging",
            "s3-outposts:GetBucketLifecycleConfiguration"
        ],
        "update": [
            "s3-outposts:PutBucketTagging",
            "s3-outposts:DeleteBucketTagging",
            "s3-outposts:PutBucketLifecycleConfiguration",
            "s3-outposts:DeleteBucketLifecycleConfiguration"
        ],
        "delete": [
            "s3-outposts:DeleteBucket"
        ]
    },
    "AWS::S3Outposts::BucketPolicy": {
        "create": [
            "s3-outposts:PutBucketPolicy",
            "s3-outposts:GetBucketPolicy"
        ],
        "read": [
            "s3-outposts:GetBucketPolicy"
        ],
        "update": [
            "s3-outposts:PutBucketPolicy",
            "s3-outposts:GetBucketPolicy"
        ],
        "delete": [
            "s3-outposts:DeleteBucketPolicy",
            "s3-outposts:GetBucketPolicy"
        ]
    },
    "AWS::SES::ContactList": {
        "create": [
            "ses:CreateContactList"
        ],
        "read": [
            "ses:GetContactList"
        ],
        "update": [
            "ses:UpdateContactList",
            "ses:UntagResource",
            "ses:TagResource"
        ],
        "delete": [
            "ses:DeleteContactList"
        ]
    },
    "AWS::SSM::Association": {
        "create": [
            "ec2:DescribeInstanceStatus",
            "iam:PassRole",
            "ssm:CreateAssociation",
            "ssm:DescribeAssociation"
        ],
        "read": [
            "ssm:DescribeAssociation",
            "resource-groups:GetGroupQuery",
            "resource-groups:ListGroups",
            "resource-groups:ListGroupResources"
        ],
        "update": [
            "iam:PassRole",
            "ssm:UpdateAssociation"
        ],
        "delete": [
            "ssm:DeleteAssociation"
        ]
    },
    "AWS::SSM::Document": {
        "create": [
            "ssm:CreateDocument",
            "s3:GetObject",
            "iam:PassRole"
        ],
        "read": [
            "ssm:GetDocument"
        ],
        "update": [
            "ssm:UpdateDocument",
            "s3:GetObject",
            "ssm:AddTagsToResource",
            "ssm:RemoveTagsFromResource",
            "ssm:ListTagsForResource",
            "iam:PassRole"
        ],
        "delete": [
            "ssm:DeleteDocument"
        ]
    },
    "AWS::SSM::ResourceDataSync": {
        "create": [
            "ssm:CreateResourceDataSync",
            "ssm:ListResourceDataSync"
        ],
        "read": [
            "ssm:ListResourceDataSync"
        ],
        "update": [
            "ssm:ListResourceDataSync",
            "ssm:UpdateResourceDataSync"
        ],
        "delete": [
            "ssm:ListResourceDataSync",
            "ssm:DeleteResourceDataSync"
        ]
    },
    "AWS::SSMContacts::Contact": {
        "create": [
            "ssm-contacts:CreateContact"
        ],
        "read": [
            "ssm-contacts:GetContact"
        ],
        "update": [
            "ssm-contacts:UpdateContact"
        ],
        "delete": [
            "ssm-contacts:DeleteContact"
        ]
    },
    "AWS::SSMContacts::ContactChannel": {
        "create": [
            "ssm-contacts:CreateContactChannel"
        ],
        "read": [
            "ssm-contacts:GetContactChannel"
        ],
        "update": [
            "ssm-contacts:UpdateContactChannel"
        ],
        "delete": [
            "ssm-contacts:DeleteContactChannel"
        ]
    },
    "AWS::SSMIncidents::ReplicationSet": {
        "create": [
            "ssm-incidents:CreateReplicationSet",
            "ssm-incidents:ListReplicationSets",
            "ssm-incidents:UpdateDeletionProtection",
            "iam:CreateServiceLinkedRole"
        ],
        "read": [
            "ssm-incidents:ListReplicationSets",
            "ssm-incidents:GetReplicationSet"
        ],
        "update": [
            "ssm-incidents:UpdateReplicationSet",
            "ssm-incidents:UpdateDeletionProtection",
            "ssm-incidents:GetReplicationSet"
        ],
        "delete": [
            "ssm-incidents:DeleteReplicationSet",
            "ssm-incidents:GetReplicationSet"
        ]
    },
    "AWS::SSMIncidents::ResponsePlan": {
        "create": [
            "ssm-incidents:CreateResponsePlan",
            "iam:PassRole"
        ],
        "read": [
            "ssm-incidents:GetResponsePlan",
            "ssm-incidents:ListTagsForResource"
        ],
        "update": [
            "ssm-incidents:UpdateResponsePlan",
            "iam:PassRole",
            "ssm-incidents:TagResource",
            "ssm-incidents:UntagResource",
            "ssm-incidents:ListTagsForResource"
        ],
        "delete": [
            "ssm-incidents:DeleteResponsePlan"
        ]
    },
    "AWS::SSO::InstanceAccessControlAttributeConfiguration": {
        "create": [
            "sso:CreateInstanceAccessControlAttributeConfiguration",
            "sso:UpdateApplicationProfileForAWSAccountInstance",
            "sso:DescribeInstanceAccessControlAttributeConfiguration"
        ],
        "read": [
            "sso:DescribeInstanceAccessControlAttributeConfiguration"
        ],
        "update": [
            "sso:UpdateInstanceAccessControlAttributeConfiguration",
            "sso:DescribeInstanceAccessControlAttributeConfiguration"
        ],
        "delete": [
            "sso:DeleteInstanceAccessControlAttributeConfiguration",
            "sso:DescribeInstanceAccessControlAttributeConfiguration"
        ]
    },
    "AWS::SSO::PermissionSet": {
        "create": [
            "sso:CreatePermissionSet",
            "sso:PutInlinePolicyToPermissionSet",
            "sso:AttachManagedPolicyToPermissionSet",
            "sso:ListManagedPoliciesInPermissionSet",
            "sso:TagResource"
        ],
        "read": [
            "sso:DescribePermissionSet",
            "sso:ListTagsForResource",
            "sso:ListManagedPoliciesInPermissionSet",
            "sso:GetInlinePolicyForPermissionSet"
        ],
        "update": [
            "sso:UpdatePermissionSet",
            "sso:TagResource",
            "sso:UntagResource",
            "sso:ListTagsForResource",
            "sso:AttachManagedPolicyToPermissionSet",
            "sso:DetachManagedPolicyFromPermissionSet",
            "sso:ListManagedPoliciesInPermissionSet",
            "sso:PutInlinePolicyToPermissionSet",
            "sso:DeleteInlinePolicyFromPermissionSet",
            "sso:ProvisionPermissionSet",
            "sso:DescribePermissionSetProvisioningStatus"
        ],
        "delete": [
            "sso:DeletePermissionSet"
        ]
    },
    "AWS::SageMaker::AppImageConfig": {
        "create": [
            "sagemaker:CreateAppImageConfig",
            "sagemaker:DescribeAppImageConfig"
        ],
        "read": [
            "sagemaker:DescribeAppImageConfig"
        ],
        "update": [
            "sagemaker:UpdateAppImageConfig",
            "sagemaker:DescribeAppImageConfig"
        ],
        "delete": [
            "sagemaker:DeleteAppImageConfig"
        ]
    },
    "AWS::SageMaker::Device": {
        "create": [
            "sagemaker:RegisterDevices"
        ],
        "read": [
            "sagemaker:DescribeDevice"
        ],
        "update": [
            "sagemaker:UpdateDevices"
        ],
        "delete": [
            "sagemaker:DeregisterDevices"
        ]
    },
    "AWS::SageMaker::DeviceFleet": {
        "create": [
            "sagemaker:CreateDeviceFleet",
            "iam:PassRole"
        ],
        "read": [
            "sagemaker:DescribeDeviceFleet"
        ],
        "update": [
            "sagemaker:UpdateDeviceFleet",
            "iam:PassRole"
        ],
        "delete": [
            "sagemaker:DeleteDeviceFleet"
        ]
    },
    "AWS::SageMaker::Domain": {
        "create": [
            "sagemaker:CreateDomain",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeImage",
            "sagemaker:DescribeImageVersion",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole",
            "efs:CreateFileSystem",
            "kms:CreateGrant",
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:GenerateDataKeyWithoutPlainText"
        ],
        "read": [
            "sagemaker:DescribeDomain"
        ],
        "update": [
            "sagemaker:UpdateDomain",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeImage",
            "sagemaker:DescribeImageVersion",
            "iam:PassRole"
        ],
        "delete": [
            "sagemaker:DeleteDomain",
            "sagemaker:DescribeDomain"
        ]
    },
    "AWS::SageMaker::Image": {
        "create": [
            "sagemaker:CreateImage",
            "iam:PassRole"
        ],
        "read": [
            "sagemaker:DescribeImage",
            "sagemaker:ListTags"
        ],
        "update": [
            "sagemaker:UpdateImage",
            "sagemaker:DescribeImage",
            "sagemaker:ListTags",
            "sagemaker:AddTags",
            "sagemaker:DeleteTags",
            "iam:PassRole"
        ],
        "delete": [
            "sagemaker:DeleteImage",
            "sagemaker:DescribeImage"
        ]
    },
    "AWS::SageMaker::ModelPackageGroup": {
        "create": [
            "sagemaker:CreateModelPackageGroup",
            "sagemaker:DescribeModelPackageGroup",
            "sagemaker:GetModelPackageGroupPolicy",
            "sagemaker:PutModelPackageGroupPolicy"
        ],
        "read": [
            "sagemaker:DescribeModelPackageGroup",
            "sagemaker:GetModelPackageGroupPolicy",
            "sagemaker:PutModelPackageGroupPolicy",
            "sagemaker:ListTags"
        ],
        "update": [
            "sagemaker:DescribeModelPackageGroup",
            "sagemaker:GetModelPackageGroupPolicy",
            "sagemaker:DeleteModelPackageGroupPolicy",
            "sagemaker:PutModelPackageGroupPolicy",
            "sagemaker:ListTags",
            "sagemaker:AddTags",
            "sagemaker:DeleteTags"
        ],
        "delete": [
            "sagemaker:DeleteModelPackageGroup",
            "sagemaker:DescribeModelPackageGroup",
            "sagemaker:GetModelPackageGroupPolicy",
            "sagemaker:DeleteModelPackageGroupPolicy"
        ]
    },
    "AWS::SageMaker::MonitoringSchedule": {
        "create": [
            "sagemaker:CreateMonitoringSchedule",
            "sagemaker:DescribeMonitoringSchedule",
            "iam:PassRole"
        ],
        "read": [
            "sagemaker:DescribeMonitoringSchedule"
        ],
        "update": [
            "sagemaker:UpdateMonitoringSchedule",
            "sagemaker:DescribeMonitoringSchedule"
        ],
        "delete": [
            "sagemaker:DeleteMonitoringSchedule",
            "sagemaker:DescribeMonitoringSchedule"
        ]
    },
    "AWS::SageMaker::Pipeline": {
        "create": [
            "iam:PassRole",
            "s3:GetObject",
            "sagemaker:CreatePipeline",
            "sagemaker:DescribePipeline"
        ],
        "read": [
            "sagemaker:DescribePipeline"
        ],
        "update": [
            "iam:PassRole",
            "s3:GetObject",
            "sagemaker:UpdatePipeline",
            "sagemaker:DescribePipeline"
        ],
        "delete": [
            "sagemaker:DeletePipeline"
        ]
    },
    "AWS::SageMaker::Project": {
        "create": [
            "sagemaker:CreateProject",
            "sagemaker:DescribeProject",
            "servicecatalog:DescribeProduct",
            "servicecatalog:DescribeProvisioningArtifact",
            "servicecatalog:ProvisionProduct",
            "servicecatalog:DescribeProvisionedProduct",
            "servicecatalog:TerminateProvisionedProduct"
        ],
        "read": [
            "sagemaker:DescribeProject",
            "sagemaker:ListTags"
        ],
        "update": [
            "sagemaker:DescribeProject",
            "sagemaker:ListTags",
            "sagemaker:AddTags",
            "sagemaker:DeleteTags"
        ],
        "delete": [
            "sagemaker:DeleteProject"
        ]
    },
    "AWS::SageMaker::UserProfile": {
        "create": [
            "sagemaker:CreateUserProfile",
            "sagemaker:DescribeUserProfile",
            "sagemaker:DescribeImage",
            "sagemaker:DescribeImageVersion",
            "iam:PassRole"
        ],
        "read": [
            "sagemaker:DescribeUserProfile"
        ],
        "update": [
            "sagemaker:UpdateUserProfile",
            "sagemaker:DescribeUserProfile",
            "sagemaker:DescribeImage",
            "sagemaker:DescribeImageVersion",
            "iam:PassRole"
        ],
        "delete": [
            "sagemaker:DeleteUserProfile",
            "sagemaker:DescribeUserProfile"
        ]
    },
    "AWS::ServiceCatalog::CloudFormationProvisionedProduct": {
        "create": [
            "*"
        ],
        "read": [
            "*"
        ],
        "delete": [
            "*"
        ],
        "update": [
            "*"
        ]
    },
    "AWS::ServiceCatalog::ServiceAction": {
        "create": [
            "servicecatalog:CreateServiceAction",
            "ssm:DescribeDocument",
            "iam:GetRole"
        ],
        "read": [
            "servicecatalog:DescribeServiceAction"
        ],
        "delete": [
            "servicecatalog:DeleteServiceAction"
        ],
        "update": [
            "servicecatalog:UpdateServiceAction",
            "iam:GetRole"
        ]
    },
    "AWS::ServiceCatalogAppRegistry::Application": {
        "create": [
            "servicecatalog:CreateApplication",
            "servicecatalog:TagResource"
        ],
        "read": [
            "servicecatalog:GetApplication"
        ],
        "delete": [
            "servicecatalog:DeleteApplication"
        ],
        "update": [
            "servicecatalog:ListTagsForResource",
            "servicecatalog:TagResource",
            "servicecatalog:UntagResource",
            "servicecatalog:UpdateApplication"
        ]
    },
    "AWS::ServiceCatalogAppRegistry::AttributeGroup": {
        "create": [
            "servicecatalog:CreateAttributeGroup",
            "servicecatalog:TagResource"
        ],
        "read": [
            "servicecatalog:GetAttributeGroup"
        ],
        "delete": [
            "servicecatalog:DeleteAttributeGroup"
        ],
        "update": [
            "servicecatalog:UpdateAttributeGroup",
            "servicecatalog:ListTagsForResource",
            "servicecatalog:TagResource",
            "servicecatalog:UntagResource"
        ]
    },
    "AWS::Signer::SigningProfile": {
        "create": [
            "signer:PutSigningProfile"
        ],
        "read": [
            "signer:GetSigningProfile"
        ],
        "delete": [
            "signer:CancelSigningProfile",
            "signer:GetSigningProfile"
        ],
        "update": [
            "signer:TagResource",
            "signer:UntagResource",
            "signer:GetSigningProfile"
        ]
    },
    "AWS::StepFunctions::StateMachine": {
        "create": [
            "states:CreateStateMachine",
            "iam:PassRole",
            "s3:GetObject"
        ],
        "read": [
            "states:DescribeStateMachine"
        ],
        "delete": [
            "states:DeleteStateMachine",
            "states:DescribeStateMachine"
        ],
        "update": [
            "states:UpdateStateMachine",
            "states:TagResource",
            "states:UntagResource",
            "states:ListTagsForResource",
            "iam:PassRole"
        ]
    },
    "AWS::Synthetics::Canary": {
        "create": [
            "synthetics:CreateCanary",
            "synthetics:StartCanary",
            "s3:CreateBucket",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:PutBucketEncryption",
            "s3:PutEncryptionConfiguration",
            "lambda:CreateFunction",
            "lambda:AddPermission",
            "lambda:PublishVersion",
            "lambda:UpdateFunctionConfiguration",
            "lambda:GetFunctionConfiguration",
            "lambda:GetLayerVersionByArn",
            "lambda:GetLayerVersion",
            "lambda:PublishLayerVersion",
            "ec2:DescribeVpcs",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups",
            "iam:PassRole"
        ],
        "read": [
            "synthetics:GetCanary",
            "synthetics:DescribeCanaries",
            "synthetics:ListTagsForResource",
            "iam:ListRoles",
            "s3:ListAllMyBuckets",
            "s3:GetBucketLocation"
        ],
        "delete": [
            "synthetics:DeleteCanary",
            "synthetics:GetCanary"
        ],
        "update": [
            "synthetics:UpdateCanary",
            "synthetics:StartCanary",
            "synthetics:StopCanary",
            "synthetics:TagResource",
            "synthetics:UntagResource"
        ]
    },
    "AWS::Timestream::Database": {
        "create": [
            "timestream:CreateDatabase",
            "timestream:DescribeEndpoints"
        ],
        "read": [
            "timestream:DescribeDatabase",
            "timestream:DescribeEndpoints",
            "timestream:ListTagsForResource"
        ],
        "delete": [
            "timestream:DeleteDatabase",
            "timestream:DescribeEndpoints"
        ],
        "update": [
            "timestream:UpdateDatabase",
            "timestream:DescribeEndpoints",
            "timestream:TagResource",
            "timestream:UntagResource"
        ]
    },
    "AWS::Timestream::Table": {
        "create": [
            "timestream:CreateTable",
            "timestream:DescribeEndpoints"
        ],
        "read": [
            "timestream:DescribeTable",
            "timestream:DescribeEndpoints",
            "timestream:ListTagsForResource"
        ],
        "delete": [
            "timestream:DeleteTable",
            "timestream:DescribeEndpoints"
        ],
        "update": [
            "timestream:UpdateTable",
            "timestream:DescribeEndpoints",
            "timestream:TagResource",
            "timestream:UntagResource"
        ]
    },
    "AWS::WAFv2::IPSet": {
        "create": [
            "wafv2:CreateIPSet",
            "wafv2:GetIPSet",
            "wafv2:ListTagsForResource"
        ],
        "read": [
            "wafv2:GetIPSet",
            "wafv2:ListTagsForResource"
        ],
        "delete": [
            "wafv2:DeleteIPSet",
            "wafv2:GetIPSet"
        ],
        "update": [
            "wafv2:UpdateIPSet",
            "wafv2:GetIPSet",
            "wafv2:ListTagsForResource"
        ]
    },
    "AWS::WAFv2::LoggingConfiguration": {
        "create": [
            "wafv2:PutLoggingConfiguration",
            "wafv2:GetLoggingConfiguration",
            "firehose:ListDeliveryStreams",
            "iam:CreateServiceLinkedRole",
            "iam:DescribeOrganization"
        ],
        "read": [
            "wafv2:GetLoggingConfiguration"
        ],
        "delete": [
            "wafv2:DeleteLoggingConfiguration",
            "wafv2:GetLoggingConfiguration"
        ],
        "update": [
            "wafv2:PutLoggingConfiguration",
            "wafv2:GetLoggingConfiguration",
            "firehose:ListDeliveryStreams",
            "iam:CreateServiceLinkedRole",
            "iam:DescribeOrganization"
        ]
    },
    "AWS::WAFv2::RegexPatternSet": {
        "create": [
            "wafv2:CreateRegexPatternSet",
            "wafv2:GetRegexPatternSet",
            "wafv2:ListTagsForResource"
        ],
        "read": [
            "wafv2:GetRegexPatternSet",
            "wafv2:ListTagsForResource"
        ],
        "delete": [
            "wafv2:DeleteRegexPatternSet",
            "wafv2:GetRegexPatternSet"
        ],
        "update": [
            "wafv2:UpdateRegexPatternSet",
            "wafv2:GetRegexPatternSet",
            "wafv2:ListTagsForResource"
        ]
    },
    "AWS::WAFv2::RuleGroup": {
        "create": [
            "wafv2:CreateRuleGroup",
            "wafv2:GetRuleGroup",
            "wafv2:ListTagsForResource"
        ],
        "read": [
            "wafv2:GetRuleGroup",
            "wafv2:ListTagsForResource"
        ],
        "delete": [
            "wafv2:DeleteRuleGroup",
            "wafv2:GetRuleGroup"
        ],
        "update": [
            "wafv2:UpdateRuleGroup",
            "wafv2:GetRuleGroup",
            "wafv2:ListTagsForResource"
        ]
    },
    "AWS::WAFv2::WebACL": {
        "create": [
            "wafv2:CreateWebACL",
            "wafv2:GetWebACL",
            "wafv2:ListTagsForResource"
        ],
        "read": [
            "wafv2:GetWebACL",
            "wafv2:ListTagsForResource"
        ],
        "delete": [
            "wafv2:DeleteWebACL",
            "wafv2:GetWebACL"
        ],
        "update": [
            "wafv2:UpdateWebACL",
            "wafv2:GetWebACL",
            "wafv2:ListTagsForResource"
        ]
    },
    "AWS::WAFv2::WebACLAssociation": {
        "create": [
            "wafv2:AssociateWebACL",
            "elasticloadbalancing:SetWebACL",
            "apigateway:SetWebACL",
            "appsync:SetWebACL"
        ],
        "read": [
            "wafv2:GetWebACLForResource",
            "wafv2:GetWebACL"
        ],
        "delete": [
            "wafv2:DisassociateWebACL",
            "wafv2:GetWebACLForResource",
            "wafv2:GetWebACL",
            "elasticloadbalancing:SetWebACL",
            "apigateway:SetWebACL",
            "appsync:SetWebACL"
        ],
        "update": []
    },
    "AWS::XRay::Group": {
        "create": [
            "xray:CreateGroup",
            "xray:TagResource"
        ],
        "read": [
            "xray:GetGroup"
        ],
        "delete": [
            "xray:DeleteGroup"
        ],
        "update": [
            "xray:UpdateGroup"
        ]
    },
    "AWS::XRay::SamplingRule": {
        "create": [
            "xray:CreateSamplingRule",
            "xray:TagResource"
        ],
        "read": [
            "xray:GetSamplingRules"
        ],
        "delete": [
            "xray:DeleteSamplingRule"
        ],
        "update": [
            "xray:UpdateSamplingRule"
        ]
    }
}
